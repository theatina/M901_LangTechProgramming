Άνοιγμα – κλείσιμο αρχείου
Προγραμματισμός II
Τα κανάλια stdin, stdout, stderr
Τα stdin, stdout, stderr δεν είναι μεταβλητές αλλά σταθερές και δεν μπορούν να αλλαχθούν.
Όπως ο υπολογιστής δημιουργεί αυτόματα αυτούς τους δείκτες αρχείου στην αρχή του προγράμματος, έτσι και τους αποσύρει αυτόματα στο τέλος του προγράμματος.
Δε θα πρέπει να κλείσουν αυτά τα κανάλια με παρέμβαση του χρήστη.
Μπορούν να ανακατευθυνθούν τα κανάλια και να γράφονται τα μηνύματα λάθους σε αρχείο αντί να εμφανίζονται στην οθόνη.
Με την εντολή program_name < filename ορίζεται ως κύρια είσοδος αντί του πληκτρολογίου το αρχείο filename.
Με την εντολή program_name > filename ορίζεται ως κύρια έξοδος αντί για την οθόνη το αρχείο filename.
Οι παραπάνω εντολές δίνονται από τη γραμμή διαταγής (command line). Η printf γράφει στο stdout και η scanf στο stdin.
Ενδιάμεση μνήμη (buffer)
Για ανάγνωση κι εγγραφή σε συσκευές εισόδου/εξόδου (input/output, Ι/Ο), όπως ο σκληρός δίσκος, τα λειτουργικά συστήματα χρησιμοποιούν ενδιάμεση μνήμη (buffers), η οποία είναι περιοχή της μνήμης όπου τα δεδομένα αποθηκεύονται προσωρινά πριν σταλούν στον τελικό τους στόχο.
Έτσι επιταχύνονται τα προγράμματα γιατί ελαχιστοποιείται ο αριθμός των προσβάσεων στις Ι/Ο συσκευές.
Οι μονάδες Ι/Ο επιτρέπουν στο λειτουργικό σύστημα να έχει πρόσβαση μόνο σε καθορισμένου μεγέθους τμήματα, τα ονομαζόμενα blocks, μεγέθους 512 ή 1024 bytes.
Επομένως, ακόμη κι αν θέλουμε να διαβάσουμε μόνο ένα χαρακτήρα από ένα αρχείο, το λειτουργικό σύστημα διαβάζει όλο το μπλοκ στο οποίο βρίσκεται αποθηκευμένος ο χαρακτήρας.
Έτσι, με τη χρήση του buffer, εάν χρειασθούμε άλλους χαρακτήρες από το ίδιο μπλοκ δεν επιστρέφουμε στη συσκευή αλλά τους διαβάζουμε από το buffer.
Δύο ευρείες τάξεις αρχείων
Δυαδικά αρχεία (binary files):
Αποθηκεύουν κάθε τύπο δεδομένου: οριζόμενο από το χρήστη, char, int, float, double, string, data struct, κ.λ.π.
Συνήθως ΔΕΝ είναι αναγνώσιμα από τους συντάκτες (editors)
Συνήθως ΔΕΝ είναι φορητά (δεν ανοίγουν σε όλα τα μηχανήματα)
Αρχεία κειμένου (text files)
Αποθηκεύουν μία ακολουθία (ένα ‘ρεύμα - stream’) από bytes χαρακτήρων.
Είναι αναγνώσιμα από τους συντάκτες (π.χ. αρχεία .h, .c)
Είναι φορητά σε κάθε υπολογιστή (σχεδόν)
Στα αρχεία κειμένου τα πάντα αποθηκεύονται ως ακολουθίες χαρακτήρων (τα stdin, stdout είναι ανοικτά ως κανάλια κειμένου).
Στα δυαδικά αρχεία ο μεταγλωττιστής δεν κάνει μεταγλώττιση των bytes, απλά διαβάζει και γράφει bits, ακριβώς όπως αυτά εμφανίζονται.
Παράδειγμα:
Ο αριθμός 12345 εγγράφεται ως αλφαριθμητικό σε αρχείο κειμένου, απαιτώντας 6 bytes (1 για κάθε χαρακτήρα κι ένα για το χαρακτήρα τερματισμού ‘\0’). Αντίθετα, σε ένα δυαδικό αρχείο εγγράφεται ως ακέραιος, απαιτώντας 4 bytes.
ΠΑΝΤΟΤΕ να ανοίγετε ένα αρχείο πριν τη χρήση,
ΠΑΝΤΟΤΕ να το κλείνετε όταν περατώνεται η χρήση του.
FILE *pF; /* δήλωση ενός pointer σε μεταβλητή FILE */
pF = fopen(“myfile.txt”,”r”); /* άνοιγμα αρχείου */
/* . . . Διάφορες λειτουργίες . . .*/
Το όνομα αρχείου εισέρχεται ως string
(ο δείκτης δείχνει στον πρώτο χαρακτήρα του)
Προσδιοριστής string που ελέγχει το είδος της πρόσβασης
Επιστρεφόμενη τιμή: ‘pointer-to-FILE’
(ή NULL σε περίπτωση σφάλματος)
FILE *pF;/* δήλωση ενός pointer σε μεταβλητή FILE */
Κλείσιμο αρχείου: Επιστρέφει 0 όταν κλείνει σωστά ή EOF όταν υπάρχει σφάλμα
Εάν θέλουμε ολόκληρη τη διαδρομή μέσα στο μέσο αποθήκευσης:
Π.χ. pF = fopen("c:\\teiser\\strprogr\\myfile.txt","r");
Η fopen δεσμεύει τους απαραίτητους πόρους από το λειτουργικό σύστημα, δημιουργεί το κανάλι επικοινωνίας κι επιστρέφει στο πρόγραμμα που την κάλεσε ένα δείκτη, που δείχνει σε δομή τύπου FILE.
Ο δείκτης, που δείχνει σε δομή τύπου FILE, είναι γνωστός ως διαχειριστής ή δείκτης αρχείου (file handler ή file descriptor). Χρησιμοποιείται για να κρατήσει την ταυτότητα του καναλιού που επιστρέφεται από την fopen.
Η FILE ορίζεται στο <stdio.h>.
Ένα από τα πεδία της δομής FILE είναι ο δείκτης θέσης αρχείου (file position indicator), ο οποίος δείχνει στο byte από όπου ο επόμενος χαρακτήρας πρόκειται να διαβασθεί ή όπου ο επόμενος χαρακτήρας πρόκειται να εγγραφεί.
Παράμετροι προσδιορισμού του τρόπου πρόσβασης σε αρχεία κειμένου:
‘r’: άνοιγμα αρχείου για ανάγνωση.
Ο δείκτης θέσης αρχείου βρίσκεται στην αρχή του κειμένου.
‘w’: δημιουργία νέου αρχείου για εγγραφή.
Εάν το αρχείο υπάρχει ήδη, το μέγεθός του θα μηδενισθεί και τα περιεχόμενα θα διαγραφούν.
Ο δείκτης θέσης αρχείου τίθεται στην αρχή του αρχείου.
‘a’: άνοιγμα υπάρχοντος αρχείου κειμένου, στο οποίο όμως μπορούμε να γράψουμε μόνο στο τέλος του αρχείου.
‘r+’: άνοιγμα υπάρχοντος αρχείου κειμένου για ανάγνωση και εγγραφή.
‘w+’: δημιουργία νέου αρχείου για ανάγνωση και εγγραφή.
Παράμετροι προσδιορισμού του τρόπου πρόσβασης σε αρχεία κειμένου (συνέχεια):
‘a+’: άνοιγμα υπάρχοντος αρχείου ή δημιουργία νέου σε append μορφή.
Μπορούμε να διαβάσουμε δεδομένα από οποιοδήποτε σημείο του αρχείου, αλλά μπορούμε να γράψουμε δεδομένα μόνο στη θέση του δείκτη end-of-file.
Οι προσδιοριστές για τα δυαδικά αρχεία μορφή είναι ίδιοι, με τη διαφορά ότι έχουν ένα b που τους ακολουθεί.
Έτσι, για να ανοίξουμε ένα δυαδικό αρχείο και να διαβάσουμε, θα πρέπει να χρησιμοποιήσουμε τον προσδιοριστή ‘rb’.
Παρατηρήσεις:
1) Ο δείκτης FILE χειρίζεται κατά τρόπο αποκλειστικό το αρχείο
2) Στους δείκτες FILE δεν επιτρέπεται ‘αριθμητική δεικτών’!!!
Π.χ.
fclose(pF); /* σωστό */
fclose(pF+1); /* ΛΑΘΟΣ */
3) fopen():δεσμεύει μνήμη.
Εάν ξεχάσουμε να την απελευθερώσουμε με fclose() θα έχουμε μεγάλη διαρροή μνήμης!!
fprintf(): “Τύπωσε στο αρχείο”
Ακριβώς οι ίδιοι μορφολογικοί κανόνες με εκείνους της printf()
FILE *pF; /* δήλωση ενός pointer-to-FILE */
Άνοιγμα αρχείου για εγγραφή
Εγγραφή string, όπως ακριβώς στην printf
Λίστα από pointers-to-items προς εγγραφή: string, int, float,…
Επιστρεφόμενη τιμή:
Ο αριθμός των bytes που ενεγράφησαν στο αρχείο
Τέλος εργασιών, κλείσιμο του αρχείου
Ακριβώς οι ίδιοι μορφολογικοί κανόνες με εκείνους της scanf()
Άνοιγμα αρχείου για ανάγνωση
fscanf(): “Διάβασε κείμενο από αρχείο”
Ανάγνωση string, όπως ακριβώς στην scanf, χωρίς &
Λίστα από pointers-to-items προς ανάγνωση: int, float,…
Επιστρεφόμενη τιμή: Ο αριθμός των στοιχείων που ανεγνώσθησαν.
Σε περίπτωση σφάλματος θα επιστραφεί το μηδέν ή το EOF
Προσοχή: Παρόλο που η χρήση των fprintf(), fscanf() είναι συχνά ο πιο εύκολος τρόπος για να γράφουμε ή να διαβάζουμε μία συλλογή δεδομένων σε ένα αρχείο δίσκου, δεν είναι πάντοτε και ο πιο αποτελεσματικός.
Επειδή γράφουμε φορμαρισμένα δεδομένα ASCII όπως θα εμφανίζονταν στην οθόνη, κι όχι δυαδικά, κάνουμε περισσότερα πράγματα σε κάθε κλήση και καταλαμβάνουμε περισσότερο χώρο.
Έτσι, εάν μας ενδιαφέρει η ταχύτητα ή το μέγεθος του αρχείου, θα πρέπει πιθανώς να χρησιμοποιήσουμε τις συναρτήσεις fread() και fwrite().
