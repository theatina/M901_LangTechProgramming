 Όσοι ολοκληρώνουν το μάθημα με επιτυχία να:  Γνωρίζουν καλά τις βασικές αρχές του αντικειμενοστρεφούς προγραμματισμού: αντικείμενα, κλάσεις, γνωρίσματα, μεθόδους, αφαιρετικούς τύπους δεδομένων, ενθυλάκωση,  Είναι εξοικειωμένοι με βασικές τεχνικές του προγραμματισμού με Java όπως: χειρισμός εξαιρέσεων, πολυνηματισμός, χρήση εφαρμογών τρίτων, χειρισμός συλλογών αντικειμένων, σύνδεση  Μπορούν να καθορίζουν τη λογική για την επίλυση ενός προβλήματος σύμφωνα με το υπόδειγμα του αντικειμενοστρεφούς προγραμματισμού και κατόπιν να είναι σε θέση να την υλοποιούν σε μια ολοκληρωμένη εφαρμογή  Πώς να τεκμηριώνουν και να προετοιμάζουν ένα επαγγελματικό πρόγραμμα χρησιμοποιώντας τα εργαλεία της Java  Σύνδεση με το δομημένο προγραμματισμό  Κλάσεις: ενθυλάκωση και ελεγχόμενη πρόσβαση, στατικά μέλη  Αντικείμενα: σχεδίαση αντικειμένων, αρχικοποίηση και κατασκευαστές  γνωρίσματα, παράμετροι, τοπικές μεταβλητές, αποτελέσματα και τιμές  υπερφόρτωση μεθόδων και κατασκευαστών  Κληρονομικότητα και σύνθεση  Αφηρημένες κλάσεις και μέθοδοι.
Διεπαφές.  Χρήση κώδικα τρίτων (3ο-4ο μάθημα)  Διαχείριση αρχείων (5ο μάθημα)  Συλλογές δεδομένων (6ο μάθημα)  Διάσχιση, Εισαγωγή, Διαγραφή, Αναζήτηση  Σύνδεση με ΒΔ, καταχώρηση δεδομένων (7ο μάθημα)  Γραφικά και χειρισμός γεγονότων (8ο-9ο μάθημα)  Τεκμηρίωση εφαρμογών, Java EE (11ο μάθημα)  Επίλυση σφαλμάτων (12ο μάθημα)  Παρουσίαση εργασιών (13ο μάθημα)  Εργαστήριο: Μετά από συνεννόηση στο εργ. 4ου  Διδάσκων: Ηρακλής Βαρλάμης  Σημειώσεις, ανακοινώσεις, ασκήσεις, κλπ. Θεωρία προγραμματισμού με αντικείμενα  Επίδειξη τεχνικών προγραμματισμού Έλεγχος προόδου υλοποίησης της εφαρμογής  Επίλυση αποριών σε σχέση με την εργασία  Ανάπτυξη μιας ολοκληρωμένης εφαρμογής σε Java  Java προγραμματισμός : 8η έκδοση, H.
Deitel (μτφρ.
Χρυσούλα Απ.
Κουτρούμπα).
Εκδ.
Γκιούρδας Μ. 2010.
Αθήνα  Πλήρες εγχειρίδιο της Java 6, Laura Lemay & Rogers Cadenhead.
Εκδ.
Γκιούρδας. 2007.
Αθήνα.  Εισαγωγή στην Java, 3η έκδοση, Γ.
Λιακέας.
Εκδ.Κλειδάριθμος ΕΠΕ. 2008.
Αθήνα  Στο e-class: διαφάνειες και ασκήσεις που δίνονται στα  Βαθμολογία (ισχύει για Ιούνιο και Σεπτέμβριο):  Τελική εξέταση:70% [βαθμός >=5]  Εργασία: 30% [βαθμός >=5, υποχρεωτική]  Bonus ως 15% σε πολύ καλές εργασίες  Τελική εξέταση: με ανοιχτό βιβλίο και σημειώσεις  Εργασίες δίνετε μόνο μέσα στο εξάμηνο και ο βαθμός τους κατοχυρώνεται για το Σεπτέμβριο  Τίποτε δεν κατοχυρώνεται για επόμενη χρονιά!
Απαιτούμενα και καλές πρακτικές  "Εισαγωγή στον Προγραμματισμό"  Παρακολούθηση διαλέξεων και τήρηση σημειώσεων.  Μελέτη διαφανειών και σημειώσεων μετά από κάθε διάλεξη.  Εξάσκηση στον υπολογιστή κατά το διάβασμα.  Ενεργή συμμετοχή στα εργαστήρια.  Παρακολούθηση των περιοχών συζητήσεων.  Σοβαρή ενασχόληση με τις εργασίες.  Επανάληψη μέσω των διαφανειών πριν τις εξετάσεις.  Τη λογική του δομημένου προγραμματισμού  Μια εφαρμογή Java χρησιμοποιεί τις 4 δομές: αλλά δεν στηρίζεται σε αυτές  Η εφαρμογή μας δεν πρέπει να είναι μια σειρά από μεθόδους που η μια καλεί την άλλη και όλες μαζί διαχειρίζονται δεδομένα.
Γιατί δεν αρκεί ο δομημένος  Τα δεδομένα δεν παριστούν πάντοτε οντότητες του  Τα δεδομένα είναι πολύπλοκα και έχουν εξαρτήσεις  Όταν αλλάξουν τα δεδομένα χρειάζονται σημαντικές αλλαγές σε όλο το πρόγραμμα  Είναι προτιμότερο να σχεδιάσουμε την εφαρμογή γύρω από οντότητες που αντιλαμβανόμαστε:  Τα πάντα είναι αντικείμενα.
Τα αντικείμενα περιέχουν:  Κατάσταση: δεδομένα, χαρακτηριστικά, μεταβλητές  Συμπεριφορά: λειτουργίες, μεθόδους  Ταυτότητα: είναι μοναδικά  Κάθε αντικείμενο έχει ένα τύπο (κλάση).
Ο τύπος περιγράφει τα δεδομένα που μπορεί να αποθηκεύει (όχι όμως τις τιμές των μεταβλητών) και τις λειτουργίες που μπορεί να επιτελεί το  Όλα τα αντικείμενα ίδιου τύπου μπορούν να λαμβάνουν τα ίδια  Κάθε αντικείμενο μπορεί να αποτελείται από άλλα αντικείμενα.  Μια εφαρμογή σε Java είναι μια συλλογή αντικειμένων που επικοινωνούν μεταξύ τους με μηνύματα. κλάσεις και αντικείμενα  Αφηρημένοι τύποι δεδομένων (κλάσεις)  κλάση: Ένα σύνολο αντικειμένων με κοινά χαρακτηριστικά (data elements) και λειτουργικότητα  Οι κλάση ορίζεται μία φορά και μπορούμε να δημιουργούμε όσα στιγμιότυπα θέλουμε.  Οι αφηρημένοι τύποι λειτουργούν όπως οι συνήθεις  Μεταβλητές κάποιου τύπουαντικείμενα (objects) ή στιγμιότυπα (instances) της κλάσης επιστρέφουν τις τιμές αυτών, σε όποιον τις
Κλήση μεθόδου = Αποστολή Μηνύματος  Τα δεδομένα μπορεί να είναι απλού τύπου: int, boolean, double, float, long  Μπορεί να είναι σύνθετου τύπου.
Δηλαδή αντικείμενα μιας άλλης κλάσης: String, Δεν είναι απλός  Οι μέθοδοι περιγράφουν τις λειτουργίες της κλάσης πάνω στα δεδομένα.
Είναι ο τρόπος με τον οποίο επικοινωνούν τα αντικείμενα διαφόρων κλάσεων μεταξύ τους.  Μία μέθοδος στη Java έχει:  Το σώμα της μεθόδου πρέπει στο τέλος να επιστρέφει τιμή με χρήση της εντολής return  Αν ο τύπος επιστροφής είναι void δεν χρειάζεται return. returnType methodName( /* λίστα ορισμάτων */ ) {
Δημιουργία κλάσης Human  Τα πάντα στην Java είναι αντικείμενα κάποιας κλάσης.
Για το λόγο αυτό σε κάθε μας πρόγραμμα χρειάζεται να ορίσουμε τουλάχιστον μία κλάση.
Η κλάση αυτή θα έχει το ίδιο όνομα με το αρχείο που θα την αποθηκεύσουμε. π.χ.
Η κλάση Human θα πρέπει να αποθηκευθεί στο αρχείο Human.java  Kλήση του Java compiler παράγει ένα αρχείο Human.class
Αρκεί μόνο η κλάση Human;  Θεωρητικά αρκεί.
Αλλά είναι προτιμότερο:  Η εφαρμογή που θα διαχειρίζεται αντικείμενα της κλάσης Human θα είναι ένα java application σε μια δεύτερη κλάση με το όνομα Demo στο αρχείο Demo.java  Για να μπορέσει η εφαρμογή Demo να εκτελεστεί πρέπει να έχει μια μέθοδο με το όνομα main.  Η μέθοδος αυτή θα φτιάχνει αντικείμενα της κλάσης Human και θα καλεί τις μεθόδους τους.
Αντικείμενο = Χαρακτηριστικά + Μέθοδοι  Για να χρησιμοποιήσουμε ένα αντικείμενο πρέπει πρώτα να  Για να στείλουμε μήνυμα σε ένα αντικείμενο, δίνουμε το όνομα του αντικειμένου μία τελεία και το όνομα της  Παρόμοια δίνουμε τιμή στα  To σύνολο των διαθέσιμων λειτουργιών ενός αντικειμένου αποτελεί τη διεπαφή του με τα // Δημιουργείται ένας human
Τα αντικείμενα και η μνήμη  Όταν δημιουργούμε ένα αντικείμενο στη Java, δεσμεύουμε γι’ αυτό μνήμη και χρησιμοποιούμε πάντα μια αναφορά σ’ αυτό.  Η εντολή: Human John; ορίζει την αναφορά John σε ένα Human αντικείμενο, αλλά δεν δεσμεύει μνήμη γι’ αυτό.  Η εντολή: Human John = new Human(); δεσμεύει μνήμη για ένα αντικείμενο Human και ορίζει μια αναφορά John σ’ αυτό.  Μια μέθοδος καλείται από κάποιο αντικείμενο (συνήθως)  Μπορούμε να αναφερθούμε απευθείας στα δεδομένα  Η μέθοδος αυτή πρέπει να είναι διαθέσιμη σε όλες τις κλάσεις άρα  Η μέθοδος πρέπει να μπορεί να κληθεί χωρίς να έχει δημιουργηθεί αντικείμενο της συγκεκριμένης κλάσης, άρα να δηλωθεί static.  Τέλος πρέπει να παίρνει ορίσματα (παραμέτρους) από τη γραμμή εντολών και δεν είναι απαραίτητο να επιστρέφει κάποια τιμή.  Έτσι προκύπτει η ανάγκη για μια μέθοδο στην κύρια κλάση της εφαρμογής μας που ορίζεται ως εξής: /* σώμα της main*/
Μεταγλώττιση και εκτέλεση  Κλήση του Java compiler Παράγει ένα αρχείο Demo.class  Πρέπει τo Human.class να είναι στον ίδιο  Κλήση του Java Virtual Machine τυπώνει το μήνυμα στην οθόνη
Έλεγχος πρόσβασης - Ενθυλάκωση  Είναι καλή πρακτική να μην επιτρέπουμε πρόσβαση σε όλα τα χαρακτηριστικά ή τις μεθόδους μιας κλάσης.  Για να αποκρύψουμε από τους προγραμματιστές που θα χρησιμοποιήσουν την κλάση, τα μέρη της κλάσης που δεν χρειάζεται και δεν πρέπει να μεταβάλλουν  Για να μπορούμε να αλλάζουμε την εσωτερική δομή μιας κλάσης χωρίς να επηρεάζεται ο τρόπος επικοινωνίας της με τις  Με τον τρόπο αυτό η διεπαφή της κλάσης απλουστεύεται και περιορίζεται μόνο στα απαραίτητα
Τα όρια μιας κλάσης  Υπάρχουν τρεις τύποι πρόσβασης στα μέρη μιας κλάσης: public, private, και protected.  Δημόσια (public), τα μέρη είναι διαθέσιμα σε όλους  Ιδιωτική (private), τα μέρη είναι διαθέσιμα μόνο στην ίδια την κλάση και τις λειτουργίες της  Προστατευμένη (protected), τα μέρη είναι διαθέσιμα στην κλάση και σε όσες κλάσεις την κληρονομούν.  Δεδομένη (default) πρόσβαση, όταν δεν δηλώνεται κάποια από τις προηγούμενες, τα μέρη είναι διαθέσιμα στην κλάση και σε όλες τις υπόλοιπες κλάσεις της ίδιας εφαρμογής (του ίδιου package)  Αν δε δηλώσουμε κάτι διαφορετικό, η κλάση Demo έχει πρόσβαση και στις μεθόδους και στα χαρακτηριστικά των αντικειμένων τύπου Human.  Άν όμως κάνουμε το age private  Τότε η Demo δεν μπορεί να αναφερθεί στο age μέσα από αντικείμενα τύπου  Αντίθετα εντός της Human, μπορούμε να αναφερθούμε στο age. π.χ.
Στο σώμα των setAge και getAge  Το ίδιο μπορεί να γίνει και για τις μεθόδους μιας κλάσης  Οι μέθοδοι μιας κλάσης μπορεί να είναι: Μέθοδοι πρόσβασης (get) που διαβάζουν τις τιμές Μέθοδοι τροποποίησης (set) που τροποποιούν τις τιμές των χαρακτηριστικών Μέθοδοι κατασκευής (constructor) που αρχικοποιούν τις τιμές των χαρακτηριστικών κατά τη δημιουργία των  Άλλες βοηθητικές μέθοδοι.
Νέος ορισμός κλάσης  Προσπαθώ να δω: ποια αντικείμενα εμπλέκονται, τι δεδομένα έχει το καθένα από αυτά και ποιες λειτουργίες επιτελεί και στη συνέχεια ορίζω τις αντίστοιχες κλάσεις  Ορίζω χαρακτηριστικά: name, surname, age  Ορίζω μεθόδους πρόσβασης: getName(), setName() ..  Ορίζω άλλες βοηθητικές μεθόδους  Ορίζω μια κλάση με μια μέθοδο main()  Η κλάση αυτή εκτελεί το πρόγραμμά μου.
Μόνο που δεν περιέχει όλη τη λύση.
Κάποια πράγματα τα αναλαμβάνουν τα αντικείμενα
Βασικοί τύποι δεδομένων  Για τους βασικούς τύπους (primitive types) η Java δημιουργεί μεταβλητές και όχι αναφορές στη //(τύπος) (Όνομα Μεταβλητής)  Υπάρχουν αντίστοιχες τάξεις (wrapper types) για καθέναν από  ένας μόνο τρόπος  δεν έχει μεθόδους  πολλοί τρόποι αρχικοποίησης
Δηλώσεις μεταβλητών παντού  Οι δηλώσεις των μεταβλητών γίνονται παντού, όχι μόνο στην αρχή ενός block  Παραμένουν σε ισχύ μέχρι την έξοδο από το block που  Οι μεταβλητές πρέπει να αρχικοποιούνται πριν την χρήση τους (Ο compiler της Java επιβάλλει κάτι τέτοιο).
Εμβέλεια μεταβλητών/αντικειμένων  Κάθε μεταβλητή έχει ισχύ εντός του μπλοκ στο οποίο ορίζεται και σε κάθε μπλοκ που υπάρχει μέσα σε αυτό. γιατί μόνο το x υπάρχει */ /* εκτός της εμβέλειας του q */ int x = 96; /* Δεν επιτρέπεται γιατί έχει ήδη οριστεί το x*/  Σε αριθμητικές εκφράσεις που περιλαμβάνουν διάφορους τύπους, όλοι οι τύποι προάγονται στον πιο ευρύ οπό όλους.  Η διαίρεση ακεραίων δίνει μόνο το ακέραιο μέρος;  Υπολογισμοί που αφορούν τους τύπους byte, short, char προάγονται σε υπολογισμούς με int:
Στένεμα και διεύρυνση τύπων  Η C ελεύθερα κάνει αναθέσεις μεταξύ αριθμητικών τύπων, αλλά η Java απαιτεί casting για την ανάθεση ενός τύπου σε έναν άλλο  Το στένεμα γίνεται από περισσότερο σε λιγότερο πλούσιο τύπο Πιθανή απώλεια πληροφορίας, γι’αυτό χρειάζεται το casting π.χ. ανάθεση short σε byte, double σε float  Το πέρασμα παραμέτρων είναι το ίδιο σαν την ανάθεση.  Δεν μπορούμε να κάνουμε τίποτα cast σε boolean.
Λάθος: boolean b = (boolean) num;
Σωστό: boolean b = (num ! = 0 );
Θεμελιώδεις περικλείουσες κλάσεις  Μπορούν να υπάρχουν επειδή η Java είναι case-sensitive  H κάθε μια τους είναι wrapper κλάση για έναν απλό τύπο  Δεν μπορεί να αλλάξει η τιμή τους (τίθεται μόνο στον constructor και δεν υπάρχουν μέθοδοι που να την  Οι σταθερές String περικλείονται με διπλά εισαγωγικά  Οι τελεστές + και += υπερφορτώνονται για την ένωση δύο ή περισσοτέρων Strings.  Οτιδήποτε μπορεί να μετατραπεί σε αναπαράσταση string (όλοι οι primitive τύποι και τα αντικείμενα) εύρεση μήκους, ανάκτηση συγκεκριμένων χαρακτήρων αναζήτηση για χαρακτήρες και substrings ένωση strings, εύρεση/αντικατάσταση, σύγκριση μεταξύ  Τα Strings είναι αμετάβλητα Οι χαρακτήρες που τα αποτελούν θέτονται στον constructor και  διαίρεση(/) (για ακεραίους επιστρέφει το ακέραιο μέρος του  ανάθεση τιμής σε μεταβλητή(=)  Τελεστές προσαύξησης και μείωσης:  Δημιουργώντας ένα αντικείμενο, ουσιαστικά δεσμεύουμε μνήμη και δημιουργούμε μια αναφορά σε αυτή.  Όταν αναθέσουμε ένα αντικείμενο (c1) σε ένα άλλο (c2), ουσιαστικά έχουμε δύο αναφορές στην ίδια θέση μνήμης (αυτή που δεσμεύτηκε για το c1)  To φαινόμενο αυτό ονομάζεται aliasing  Επιστρέφουν true ή false  Για objects οι τελεστές συγκρίνουν αναφορές και όχι  Τριαδικός (ternary) τελεστής String z= (x%2==1?"Περιττός":"Άρτιος");
Χρησιμοποιείται μόνο στη λίστα παραμέτρων του for  Τελεστής πρόσθεσης String (+)  Τελεστές μετατροπής (casting)
H equals στις κλάσεις χρήστη  Ορίζοντας τη μέθοδο equals καθορίζουμε τον τρόπο με τον οποίο θα συγκρίνονται τα αντικείμενα της κλάσης μας else if(συνθήκη εισόδου)  καθορίζει την τιμή επιστρέφει την τιμή while(συνθήκη εισόδου) while(συνθήκη συνέχισης); τουλάχιστον μία φορά  for(αρχικοποίηση; συνθήκη τερματισμού; βήμα)  To break διακόπτει την εκτέλεση και βγαίνει από την εκτέλεση της συνεχίζει από την αρχή βρόχους που δεν
Επανάληψη και αναδρομή  Συχνά το ίδιο αποτέλεσμα μπορεί να με επαναλαμβανόμενη κλήση μιας μεθόδου για συγκεκριμένο αριθμό επαναλήψεων με αναδρομική κλήση της ίδιας της μεθόδου μέσα στο σώμα της. static γνωρίσματα- μέθοδοι  Αν ένα γνώρισμα είναι κοινό για όλα τα αντικείμενα μιας κλάσης τότε δεσμεύουμε μια φορά χώρο για όλα τα αντικείμενα.  Κατά τη δήλωση της κλάσης, τη δηλώνουμε static.
Το γνώρισμα αυτό θα δημιουργηθεί μία φορά μόλις δηλωθεί το πρώτο αντικείμενο αυτής της κλάσης και θα μπορεί να χρησιμοποιείται από κάθε αντικείμενο της ίδιας π.χ. static float bonus;  Αν θέλουμε να αναφερθούμε στο γνώρισμα αυτό, μπορούμε απ’ ευθείας μέσω της κλάσης:  Παρόμοια ισχύουν και για τις μεθόδους. π.χ. static setBonus(float b)  Τα static μέλη μπορούμε να τα καλούμε είτε απ’ευθείας μέσω της κλάσης είτε μέσω των αντικειμένων που δημιουργούμε.
Οι static μέθοδοι έχουν πρόσβαση στα static μέλη της κλάσης.  Πρακτικά: final = μόνο για ανάγνωση  Αν ένα γνώρισμα δηλωθεί final, τότε λειτουργεί ως σταθερά που  και δεν αλλάζει τιμή  Αν η παράμετρος εισόδου μιας μεθόδου δηλωθεί final τότε δεν μπορεί να αλλάξει τιμή στο σώμα της μεθόδου.  Αν ένα αντικείμενο δηλωθεί final τότε το όνομα του αντικειμένου θα αναφέρεται πάντα στο ίδιο αντικείμενο.  Αν μια κλάση δηλωθεί final τότε δεν μπορεί να κληρονομηθεί από
Γνωρίσματα static και final  O πιο αποτελεσματικός τρόπος για να υλοποιηθούν σταθερά γνωρίσματα μίας κλάσης είναι ως static final:  Μπορούν να είναι private αν πρόκειται να χρησιμοποιηθούν μόνο  Έχουν μόνο μία θέση αποθήκευσης όσα και αν είναι τα στιγμιότυπα μιας κλάσης και αυτή είναι αμετάβλητη. πρόσβαση τύποςΕπιστροφής όνομαΜεθόδου (τυπος1 παράμετρος1, …) για ανάγνωση, ενημέρωση
Επιστρέφει μια String περιγραφή του αντικειμένου
Απαιτούμενα και καλές πρακτικές Γιατί δεν αρκεί ο δομημένος προγραμματισμός κλάσεις και αντικείμενα Δημιουργία κλάσης Human
Αρκεί μόνο η κλάση Human;
Αντικείμενο = Χαρακτηριστικά + Μέθοδοι Τα αντικείμενα και η μνήμη Μεταγλώττιση και εκτέλεση
