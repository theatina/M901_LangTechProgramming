Άνοιγμα – κλείσιμο αρχείου
Προγραμματισμός II
Ανάγνωση αρχείου: fread()
Αντιγράφει bytes από το αρχείο στη μνήμη
Θα πρέπει να έχετε εξασφαλίσει επαρκή μνήμη!
FILE *pF; /* δήλωση ενός pointer-to-FILE */
int buf[40]; // προσωρινή αποθήκευση
/* άνοιγμα αρχείου για ανάγνωση */
if (pF == NULL) exit(-1); /*(σφάλμα!) */
Άνοιγμα αρχείου για ανάγνωση
(σε περίπτωση σφάλματος: έξοδος)
Εναλλακτικά: assert(pF!=NULL)
if(pF==NULL) exit(-1); /*(σφάλμα!) */
Δείκτης που δείχνει στον buffer.
Διατηρεί τουλάχιστον ‘n’ στοιχεία οιουδήποτε είδους. (στην παρούσα περίπτωση ακέραιοι)
το μέγεθος των προς ανάγνωση στοιχείων (σε bytes)
(στην παρούσα περίπτωση ακέραιοι)
/* άνοιγμα αρχείου προς ανάγνωση */
Ο αριθμός των προς ανάγνωση στοιχείων
pointer-to-FILE που δείχνει στο προς ανάγνωση αρχείο
if(cnt!=n) return(-1); /*(σφάλμα!) */
Επιστρεφόμενη τιμή: Αριθμός στοιχείων που ανεγνώσθησαν επιτυχώς
Eγγραφή σε αρχείο: fwrite()
Aντιγράφει bytes από τη μνήμη στο αρχείο
Η σύνταξη και η χρήση είναι αντίστοιχες με την fread() !
/* άνοιγμα αρχείου για εγγραφή */
if(pF==NULL) return(-1); /*(σφάλμα!) */
if(cnt!=n) exit(-1); /*(σφάλμα!) */
Άνοιγμα αρχείου για εγγραφή
(σε περίπτωση σφάλματος, έξοδος)
Εγγραφή σε αρχείο: fwrite()
το μέγεθος των προς εγγραφή στοιχείων (σε bytes)
Ο αριθμός των προς εγγραφή στοιχείων
pointer-to-FILE που δείχνει στο προς εγγραφή αρχείο
Επιστρεφόμενη τιμή: Αριθμός στοιχείων που ενεγράφησαν επιτυχώς
Aλφαριθμητικά και fwrite()
Σφάλμα: αμελούμε να γράψουμε τον τερματιστή του string
Θυμηθείτε ότι η strlen(msg) ΔΕ μετρά το μηδενικό χαρακτήρα ‘\0’, ο οποίος τελειώνει το αλφαριθμητικό!!
ΣΦΑΛΜΑ! - ατελής εγγραφή string -
Δε γράφει στο αρχείο το χαρακτήρα τερματισμού
Το σφάλμα διορθώνεται με την προσθήκη μίας μονάδας στη strlen(), ώστε να περιληφθεί ο χαρακτήρας τερματισμού του αλφαριθμητικού
Αλφαριθμητικά και fread()
Αρχείο κειμένου (text file) == Αρχείο αποτελούμενο αποκλειστικά από αλφαριθμητικά
Tα αρχεία κειμένου είναι πιο επίφοβα από τα αριθμητικά αρχεία
Ποιο είναι το μέγιστο μήκος αλφαριθμητικού μέσα στο αρχείο;
Δεν το γνωρίζουμε έως ότου διαβάσουμε το αρχείο
Οι τροποποιήσεις των scanf, printf επιτελούν όλο το έργο!
putc(): “Τύπωσε χαρακτήρα στο αρχείο”
Πρωτότυπο της συνάρτησης:
όπου pF ο δείκτης αρχείου που επιστρέφεται από την fopen και ch είναι ο προς εγγραφή χαρακτήρας.
Για ιστορικούς λόγους ο ch ονομάζεται int αλλά χρησιμοποιεί μόνο ένα byte, το byte χαμηλής τάξης (ανοίξτε το stdio.h για να το επιβεβαιώσετε).
Εάν η λειτουργία της συνάρτησης επιτύχει, επιστρέφεται ο χαρακτήρας που γράφτηκε.
Αν αποτύχει, θα επιστρέψει το EOF (Εnd Of File, τέλος αρχείου, ακέραιος με τιμή -1).
getc(): “Διάβασε χαρακτήρα από αρχείο”
Είναι συμπληρωματική της putc(). Πρωτότυπο της συνάρτησης:
όπου pF ο δείκτης αρχείου που επιστρέφεται από την fopen.
Για ιστορικούς λόγους η getc() επιστρέφει έναν ακέραιο αλλά τα bytes υψηλής τάξης είναι μηδέν, άρα μόνο το byte χαμηλής τάξης περιέχει πληροφορία.
Η συνάρτηση επιστρέφει ένα EOF όταν ο υπολογιστής φθάσει στο τέλος του αρχείου.
Έτσι, για να διαβάσουμε ένα αρχείο κειμένου έως το σημάδι τέλους αρχείου, μπορούμε να χρησιμοποιήσουμε τον ακόλουθο κώδικα:
Ανάγνωση/εγγραφή ενός χαρακτήρα
k = getc(pFin); /* διάβασε τον πρώτο χαρακτήρα ως int */
Ανοίγει ένα αρχείο για ανάγνωση (read) κι ένα για εγγραφή (write)
Διαβάζει τον πρώτο χαρακτήρα.
Η getc() επιστρέφει int ώστε να μπορεί να γίνουν έλεγχος για EOF (EOF=-1)
Εάν ο pFin έχει ένα char,
ο οποίος ΔΕΝ ΕΙΝΑΙ EOF, τότε …
… Τότε να αντιγραφεί στο pFout
και να ληφθεί ο επόμενος char, ...
Όταν τελικά βρεθεί EOF, περατώνεται η διαδικασία: κλείνουν τα αρχεία.
Τα προηγούμενα μπορούν να επιτευχθούν με τις fread/fwrite,
όχι μόνο με ένα χαρακτήρα αλλά με οιονδήποτε αριθμό χαρακτήρων!
char buf[100]; /* buffer χαρακτήρων */
Η fread()επιστρέφει τον αριθμό των χαρακτήρων που ανεγνώσθησαν.
Εάν γεμίσει ο buffer, τότε, …
…, Τότε γράφουμε ολόκληρο το
buffer στο αρχείο εγγραφής και ακολούθως επαναλαμβάνουμε την ανάγνωση …
Γράφει τα περιεχόμενα του
που μπορεί να παρέμειναν
Τέλος εργασιών,
κλείσιμο των αρχείων
Παράδειγμα: Να καταστρωθεί πρόγραμμα , το οποίο διαβάζει χαρακτήρες από το πληκτρολόγιο και τους γράφει σε αρχείο, έως ότου πληκτρολογήσουμε το σύμβολο του δολαρίου ($).
Aποτέλεσμα:
Συμπληρωματικό παράδειγμα: Να καταστρωθεί πρόγραμμα , το οποίο διαβάζει
οποιοδήποτε αρχείο ASCII και εμφανίζει το περιεχόμενό του στην οθόνη.
Παράδειγμα:
Να καταστρωθεί πρόγραμμα , το οποίο να δίνει τον αριθμό των λέξεων που περιέχονται σε ένα αρχείο ASCII.
Το πρόγραμμα θα πρέπει να χειρίζεται τους λευκούς χαρακτήρες (κενά, νέες γραμμές, στηλοθέτες) ως πραγματικούς χαρακτήρες.
Δηλαδή, εάν υπάρχει μία συμβολοσειρά από κενά ή χαρακτήρες επιστροφής, το πρόγραμμα τους διαβάζει και αναμένει για τον πρώτο πραγματικό (μη λευκό) χαρακτήρα. ΄Ολο αυτό το μετρά ως λέξη.
Κατόπιν διαβάζει τους πραγματικούς χαρακτήρες έως την εμφάνιση του επόμενου λευκού χαρακτήρα.
Μία μεταβλητή (σημαία) θα πρέπει να ελέγχει κατά πόσον το πρόγραμμα βρίσκεται στο μέσον μίας λέξης ή στο μέσον κάποιου κενού.
#include <stdlib.h> //για την exit()
int white=1; //σημαία λευκού χαρακτήρα
int count=0; //μετρητής λέξεων
while ((ch=getc(fptr))!=EOF) //ανάγνωση χαρακτήρων έως EOF
case ' ': //έλεγχος για λευκούς χαρακτήρες
default: //μη λευκοί χαρακτήρες, μέτρηση λέξεων
Κοινή έξοδος για τις τρεις case
