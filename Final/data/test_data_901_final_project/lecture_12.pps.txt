Άνοιγμα – κλείσιμο αρχείου
Προγραμματισμός II
Ανάγνωση/εγγραφή γραμμή ανά γραμμή
Η κλήση rtn = fgets(pBuf,max,pFile):
θα διαβάσει ένα αλφαριθμητικό από το pFile και θα το αποδώσει στo buf,
θα σταματήσει μετά τη νέα-γραμμή ’\n’ ή τον 99ο char
θα τοποθετήσει ακολούθως στο buf το null ’\0’
θα επιστρέψει pBuf σε περίπτωση επιτυχίας ή NULL εάν ο pFile άδειος
Η ίδια εργασία γίνεται με τις fscanf(), fprintf():
Η κλήση rtn=fscanf(pFile,“%99[^\n]”,buf):
θα επιστρέψει τον αριθμό των μετατροπών ή το EOF όταν φθάσει στο τέλος του pFile.
Τα περιεχόμενα γραμμής ορίζονται από τον προγραμματιστή: Η γραμμή τελειώνει είτε μετά την πρώτη εμφάνιση των χαρακτήρων \n, \0, Q ή όταν φθάσουμε στον 99ο χαρακτήρα”
Η μορφή του αρχείου εξόδου ορίζεται από τον προγραμματιστή: Θέσε ένα \n στο τέλος κάθε γραμμής.
f1=fopen(name,"r"); //fgets(): ανάγνωση γραμμή προς γραμμή
fclose(f1); //Το f1 γίνεται δυαδικό αν και δεν μπήκε το “wb”
Κατασκευή αλφαριθμητικών
Εάν θέλουμε το πρόγραμμα να κατασκευάζει αλφαριθμητικά με μεικτή χρήση λέξεων κι αριθμών και να είναι περισσότερο ευέλικτο σε ό,τι αφορά τις λειτουργίες εισόδου/εξόδου, τότε χρησιμοποιούμε τις sscanf() και sprintf(). Αποτελούν τις αντίστοιχες των scanf() και sprintf() για την περίπτωση των strings.
Τυχαία προσπέλαση δυαδικού αρχείου
Σειριακή προσπέλαση: για να βρεθεί ένα δεδομένο σε ένα αρχείο πρέπει να προσπελασθούν πρώτα όλα τα προηγούμενά του.
Επιπρόσθετα, για να ενημερωθεί μία εγγραφή του αρχείου (π.χ. ένα όνομα), πρέπει να διαβασθεί όλο το αρχείο, να γίνει η αλλαγή και κατόπιν να ξαναγραφεί.
Η σειριακή προσπέλαση δεν ενδείκνυται σε μεγάλα αρχεία ή σε αρχεία που προσπελαύνονται και τροποποιούνται συχνά.
Για αυτές τις περιπτώσεις η C παρέχει τη δυνατότητα τυχαίας προσπέλασης (random access), με την οποία υπάρχει πρόσβαση σε οιοδήποτε σημείο ενός αρχείου.
Η τυχαία προσπέλαση στηρίζεται στο γεγονός ότι κάθε ανοικτό αρχείο έχει έναν δείκτη θέσης αρχείου, ο οποίος καθορίζει σε ποιο σημείο του αρχείου θα γίνει ανάγνωση ή εγγραφή.
Η θέση αυτή δίνεται ως αριθμός bytes από την αρχή του αρχείου και είναι μία μεταβλητή της δομής FILE.
Όταν το αρχείο ανοίγει για ανάγνωση η θέση αυτή είναι 0.
Όταν ανοίγει για προσάρτηση είναι το τέλος του αρχείου.
Καθορίζοντας το δείκτη θέσης αρχείου μπορούμε να έχουμε προσπέλαση σε οιοδήποτε σημείο του αρχείου.
Αυτή είναι η έννοια της τυχαίας προσπέλασης.
Η συνάρτηση fseek()
Η συνάρτηση fseek() αποτελεί το εργαλείο για την εκτέλεση λειτουργιών τυχαίας ανάγνωσης και εγγραφής.
Ορίζεται στο stdio.h και έχει το ακόλουθο πρωτότυπο:
όπου
1) fptr είναι ένας δείκτης αρχείου που επιστρέφεται από την fopen().
2) offset είναι ο αριθμός των bytes που δηλώνουν την απόσταση της νέας θέσης από το origin.
3) origin είναι το σημείο αφετηρίας και μπορεί να έχει μία από τις τρεις ακόλουθες τιμές:
Για να βρεθεί π.χ. το offset από την τρέχουσα θέση του, το origin θα πρέπει να λάβει την τιμή SEEK_CUR.
Σε περίπτωση επιτυχίας η fseek() επιστρέφει 0, ενώ εάν αποτύχει επιστρέφει μη μηδενική τιμή.
Θα πρέπει να σημειωθεί ότι ο δείκτης θέσης αρχείου επανατοπο-θετείται στην αρχή με τη συνάρτηση
Παράδειγμα:
Για τη διαχείριση των στοιχείων των φοιτητών ορίζεται ο πίνακας student_list[size] με στοιχεία τύπου δομής Student:
Για τη διαχείριση μεμονωμένων φοιτητών ορίζεται η μεταβλητή svar, επίσης τύπου δομής Student.
Ζητείται να γραφούν συναρτήσεις που να επιτελούν τα ακόλουθα:
save_data(): Aποθήκευση των δεδομένων του πίνακα student_list στο αρχείο students.dat.
read_data(): Aνάγνωση των δεδομένων από το αρχείο και αποθήκευσή τους στον πίνακα student_list.
read_student(): Προσπέλαση ενός συγκεκριμένου φοιτητή στο αρχείο και αποθήκευση των στοιχείων του σε μία μεταβλητή τύπου Student.
save_student(): Aποθήκευση των στοιχείων ενός συγκεκριμένου φοιτητή στο αρχείο.
Η συνάρτηση καλείται στη main() ως εξής:
και έχει το ακόλουθο σώμα:
void save_data( FILE *fp, Student list[ ] ) //ή Student *list
Αντί του βρόχου for θα μπορούσε να γραφεί:
όπου svar είναι μία μεταβλητή τύπου Student (στη θέση της θα μπορούσε να είναι η &Student_list[i]), i είναι η θέση του στον πίνακα student_list.
Το σώμα της είναι το ακόλουθο:
όπου i είναι ο αύξων αριθμός του στον πίνακα student_list.
H συνάρτηση save_student() χρησιμοποιείται όταν έχουμε κάνει αλλαγές στα στοιχεία ενός φοιτητή και θέλουμε να ενημερώσουμε την εγγραφή του στο αρχείο.
H συνάρτηση read_student() χρησιμοποιείται για να φέρουμε τα στοιχεία του i-στού φοιτητή από το αρχείο και πιθανώς να τα αλλάξουμε αργότερα.
