Ένα Σύστημα Διαχείρισης Βάσης Δεδομένων (ΣΔΒΔ) (Database Management System) είναι ένα πακέτο λογισμικού (software package), που έχει ως κύριους στόχους τη συστηματική αποθήκευση (storage), αναζήτηση (retrieval) και συντήρηση Οι διάφορες επιχειρήσεις και Οργανισμοί χρησιμοποιούν τα ΣΔΒΔ ως "εργαλεία" για την αποδοτικότερη λειτουργία, διοίκηση και προγραμματισμό τους.
Αυτό σημαίνει ότι οι χρήστες (users) περιμένουν πολλά οφέλη από τη χρήση των ΣΔΒΔ, όπως βελτίωση της παραγωγικής διαδικασίας, ταχύτερη εξυπηρέτηση του πελάτη, ορθολογικότερες διοικητικές αποφάσεις, κλπ.
Αυτό εξηγεί γιατί σήμερα λειτουργούν σε παγκόσμια κλίμακα ένας μεγάλος αριθμός ΣΔΒΔ και ξοδεύονται τεράστια ποσά για την ανάπτυξη, λειτουργία και συντήρησή τους.
Αν θελήσουμε να περιγράψουμε ένα τυπικό περιβάλλον λειτουργίας ενός ΣΔΒΔ, θα διαπιστώσουμε ότι υπάρχουν 4 βασικά συστατικά: Δεδομένα (data), υλικό (hardware), λογισμικό (software) και χρήστες (users).
Η Βάση Δεδομένων (ΒΔ) είναι ένα τμήμα του ΣΔΒΔ που αποθηκεύει τα δεδομένα ενός Οργανισμού.
Πριν από την εμφάνιση της τεχνολογίας των ΒΔ, τα δεδομένα φυλάσσονταν σ' ένα σύνολο διακεκριμένων αρχείων.
Σήμερα, σε μία ΒΔ τα δεδομένα είναι ολοκληρωμένα (integrated) και καταμερισμένα (shared).
Ο όρος ολοκληρωμένα δηλώνει ότι η ΒΔ αποτελείται από την ένωση διακεκριμένων αρχείων.
Τα πλεονάζοντα (redundant) δεδομένα αποθηκεύονται όσο το δυνατόν λιγότερες φορές.
Ο όρος καταμερισμένα δηλώνει ότι τα ίδια δεδομένα μπορούν να τα χρησιμοποιούν διαφορετικοί χρήστες, σε διαφορετικές ή ακόμα και την ίδια χρονική στιγμή.
Οι ΒΔ αποθηκεύονται, συνήθως σε δευτερεύουσες μνήμες (όπως οι σκληροί δίσκοι - Hard Disks), στους οποίους υπάρχει η δυνατότητα τυχαίας προσπέλασης (random Υπάρχουν πολλά επίπεδα λογισμικού σε ένα ΣΔΒΔ.
Το κύριο πλεονέκτημα όμως της λειτουργίας του ΣΔΒΔ, είναι ότι επιτρέπει στους χρήστες να ικανοποιούν τις απαιτήσεις τους για πληροφόρηση, χωρίς να απασχολούνται καθόλου με τον τρόπο φύλαξης της ΒΔ στα αποθηκευτικά μέσα (δίσκους).
Με την έννοια αυτή, το ΣΔΒΔ λειτουργεί ως μεταφραστής, που δέχεται ως είσοδο αυτό που επιθυμεί ο χρήστης και παράγει ως αποτέλεσμα το πώς θα ικανοποιηθούν οι απαιτήσεις του.
Η επεξεργασία δεδομένων καλύπτει ένα ευρύ φάσμα εφαρμογών, κάθε μία με τις δικές της ξεχωριστές απαιτήσεις, για αποθήκευση και χειρισμό των διαφορετικών ειδών δεδομένων.
Παρ' όλη αυτή την ποικιλία, είναι δυνατή η γενίκευση της φύσης και του ρόλου των χρησιμοποιούμενων δεδομένων.
Πράγματι μια τέτοια γενίκευση είναι αναγκαία προϋπόθεση για την κατανόηση των ΣΔΒΔ και την ανάπτυξη μιας συνεπούς μεθοδολογίας για τη σχεδίασή τους.
Κατ' αρχήν, τα δεδομένα που αποθηκεύονται και χρησιμοποιούνται από ένα ΣΔΒΔ αντιπροσωπεύουν πληροφορίες για εκείνο το τμήμα του «κόσμου» με το οποίο σχετίζεται η συγκεκριμένη εφαρμογή.
Τα δεδομένα του πραγματικού κόσμου αντιστοιχίζονται σε οντότητες (entities) ή αντικείμενα (objects).
Δεύτερον, κάθε οντότητα χαρακτηρίζεται από έναν αριθμό ιδιοτήτων (π.χ. όνομα, διεύθυνση, κλπ.
Όλες αυτές οι ιδιότητες μπορεί να μην είναι σχετικές με μια συγκεκριμένη εφαρμογή επεξεργασίας δεδομένων.
Οι ιδιότητες οι οποίες είναι σχετικές και για τις οποίες αποθηκεύονται τα δεδομένα ονομάζονται γνωρίσματα (attributes).
Οντότητες του ίδιου είδους έχουν το ίδιο σύστημα γνωρισμάτων και λέμε ότι σχηματίζουν ένα σύνολο οντοτήτων (entity set) ή μια κατηγορία οντοτήτων (entity category) ή μια κλάση οντοτήτων (entity class).
Παρ' όλο που οι διάφορες οντότητες σε ένα σύνολο οντοτήτων μπορούν να έχουν τις ίδιες τιμές για συγκεκριμένα γνωρίσματα, πρέπει να υπάρχει τουλάχιστον ένα γνώρισμα (ή συνδυασμός χαρακτηριστικών γνωρισμάτων) το οποίο έχει μια μοναδική τιμή για κάθε οντότητα μέσα στο σύνολο.
Αν δεν έχουν έτσι τα πράγματα, θα ήταν αδύνατον να διαχωρίσουμε δύο οντότητες με τις ίδιες ακριβώς τιμές για όλα τα γνωρίσματα.
Διαφορετικά σε όλες τις περιπτώσεις οι δύο οντότητες θα ταυτίζονταν.
Το γνώρισμα (ή συνδυασμός γνωρισμάτων) που χρησιμοποιείται για τη διάκριση των μελών ενός συνόλου οντοτήτων ονομάζεται κλειδί (key) του συνόλου οντοτήτων.
Εξ ορισμού η τιμή του κλειδιού για κάθε οντότητα πρέπει να είναι μοναδική (π.χ. ο κωδικός, ο αριθμός ταυτότητας) Σε πολλές περιπτώσεις, το κλειδί είναι ένα γνώρισμα το οποίο εισάγεται για να δώσει με εύχρηστο τρόπο, το διακριτικό χαρακτηριστικό που απαιτείται.
Τέλος, οι οντότητες δεν είναι απομονωμένες, αλλά έχουν σχέσεις (relationships) μεταξύ τους.
Για παράδειγμα, οι υπάλληλοι μιας εταιρίας δηλώνουν συγκεκριμένη διεύθυνση κατοικίας.
Αυτές οι σχέσεις - της κατοχής, αντιστοιχίας κτλ. - είναι σημαντικές στον κόσμο των εφαρμογών με τον οποίο σχετίζονται και πρέπει να αναπαρίστανται στα δεδομένα τα οποία περιγράφουν.
Οι έννοιες που παρουσιάστηκαν προηγουμένως, επιτρέπουν να μιλάμε για δεδομένα με τρόπους οι οποίοι είναι ανεξάρτητοι από μια συγκεκριμένη εφαρμογή.
Αποτελούν τη βάση των μοντέλων δεδομένων (data models) των οποίων ο στόχος είναι να περιγράφουν τυπικά τους τρόπους με τους οποίους τα δεδομένα δομούνται και χρησιμοποιούνται.
Έχουν ήδη κατασκευαστεί διάφορα τέτοια μοντέλα δεδομένων, που περιγράφονται με κάθε λεπτομέρεια.
Για να είναι γενικά χρήσιμο ένα μοντέλο δεδομένων πρέπει να ικανοποιεί τουλάχιστον τις ακόλουθες τρεις απαιτήσεις:  Δομή (structure): Το μοντέλο πρέπει να εξασφαλίζει τα μέσα αναπαράστασης των οντοτήτων, των γνωρισμάτων και των σχέσεων  Χειρισμός (manipulation): Πρέπει να είναι δυνατό να χειρίζεται τις προαναφερθείσες αναπαραστάσεις, να αντανακλά, για παράδειγμα, την πρόσθεση νέων οντοτήτων ή κάποιες αλλαγές στα χαρακτηριστικά  Ακεραιότητα (integrity): Σε όλες τις εφαρμογές υπάρχουν πολυάριθμοι περιορισμοί οι οποίοι πρέπει να ισχύουν για τις οντότητες, τα γνωρίσματα και τις σχέσεις.
Για παράδειγμα, κάθε επίσκεψη ασθενούς σε μια μονάδα υγείας πρέπει να είναι μοναδική.
Ένα μοντέλο δεδομένων πρέπει να είναι ικανό να εκφράζει αυτούς τους περιορισμούς και η υλοποίηση πρέπει να είναι ικανή να Τα μοντέλα δεδομένων ικανοποιούν τις τρεις απαιτήσεις με ποικίλους βαθμούς επιτυχίας.
Το πιο αδύναμο σημείο στα περισσότερα μοντέλα είναι η ακεραιότητα.
Η περιοχή δηλαδή που ένα μοντέλο χρειάζεται να αναπαραστήσει μιας μορφής γνώση για τον κόσμο που μας περιβάλλει, η οποία μπορεί συχνά να είναι αρκετά περίπλοκη και η οποία ποικίλλει πάρα πολύ από εφαρμογή σε εφαρμογή.
Η γνώση για τον κόσμο έχει αποδειχτεί ότι είναι αρκετά δύσκολο να αναπαρασταθεί.
Ίσως, το πλέον αποτελεσματικό και χρησιμοποιούμενο μοντέλο δεδομένων σήμερα να είναι το σχεσιακό μοντέλο (relational model).
Το σχεσιακό μοντέλο αποτελεί τη βάση των περισσότερων σύγχρονων συστημάτων βάσεων δεδομένων.
Στο σχεσιακό μοντέλο κάθε οντότητα αναπαρίσταται από μια πλειάδα , η οποία είναι απλά μια σειρά από τις τιμές των γνωρισμάτων.
Έτσι δύο συγκεκριμένα τμήματα μπορούν να παρασταθούν με τις πλειάδες: (Λογιστήριο, Πατησίων) και (Γραμματεία, Σταδίου) αντιστοίχως.
Παρομοίως δύο υπάλληλοι που προσεληφθήκαν την ίδια ημέρα στο ίδιο τμήμα, μπορούν να εμφανιστούν με τις πλειάδες: (Bασίλης Γεωργίου του Δημητρίου, Λογιστήριο, 10/01/2005) και (Βασίλης Γεωργίου του Ιωάννη, Αφού όλες οι οντότητες του ίδιου συνόλου οντοτήτων έχουν τα ίδια γνωρίσματα, ένα σύνολο οντοτήτων μπορεί να παρασταθεί ως ένα σύνολο από πλειάδες, για κάθε οντότητα.
Αυτές οι πλειάδες μπορούν άνετα να θεωρηθούν ότι σχηματίζουν έναν πίνακα, στον οποίο οι σειρές αντιπροσωπεύουν οντότητες και οι στήλες γνωρίσματα (βλ.
Πίνακα 2).
Ένας τέτοιος πίνακας ονομάζεται σχέση (relation).
Η διάταξη των γραμμών στον πίνακα είναι χωρίς σημασία, αφού κάθε οντότητα μπορεί να εντοπιστεί χρησιμοποιώντας την τιμή του μοναδικού κλειδιού της (π.χ. αύξων αριθμός, κωδικός).
ΤΜΗΜΑΤΑ Όνομα Διεύθυνση
ΥΠΑΛΛΗΛΟΙ Όνομα Τμήμα Πρόσληψη
Ο δεύτερος πίνακας δεν περιέχει κάποιο γνώρισμα που να είναι μοναδικό για κάθε υπάλληλο και κατά συνέπεια δεν είναι δυνατόν να διαχωρίσουμε δύο υπαλλήλους (οντότητες) με ίδιες ακριβώς τιμές για όλα τα γνωρίσματα.
Για το λόγο αυτό επιχειρούμε μια δεύτερη προσέγγιση, ΥΠΑΛΛΗΛΟΙ Επώνυμο Όνομα Τμήμα Πρόσληψη Γεωργίου Bασίλης Λογιστήριο 10/01/2005 Γεωργίου Βασίλης Λογιστήριο 10/01/2005 αλλά και πάλι είναι προφανές ότι δεν εξασφαλίζουμε τη μοναδικότητα κάθε πλειάδας (συνωνυμίες, ίδια ημερομηνία πρόσληψης, ίδιο τμήμα κλπ.).
Στην τρίτη προσπάθεια ο πίνακας έχει ως εξής: ΥΠΑΛΛΗΛΟΙ Κωδ Επώνυμο Όνομα Ον.Πατ Τμήμα Πρόσληψη 1 Γεωργίου Bασίλης Δημήτριος Λογιστήριο 10/01/2005 2 Γεωργίου Βασίλης Ιωάννης Λογιστήριο 10/01/2005
Οι «σχέσεις» (relations) χρησιμοποιούνται επίσης για να αναπαραστήσουν σχέσεις μεταξύ συνόλων οντοτήτων.
Για παράδειγμα, η σχέση που δηλώνει ποιος Υπάλληλος απασχολείται σε ποια έργα.
Οι στήλες της «σχέσης» είναι τα κλειδιά των «σχέσεων» ΕΡΓΟ και ΥΠΑΛΛΗΛΟΣ, αντιστοίχως.
ΥΠΑΛΛΗΛΟΙ_ΕΡΓΑ Κωδ.Υπαλ.
Κωδ.
Έργου
Η μέχρι τώρα περιγραφή για το σχεσιακό μοντέλο έχει καλύψει μόνο τη δομική πλευρά των δεδομένων, δηλαδή την αναπαράσταση των οντοτήτων, των γνωρισμάτων και των σχέσεων, σε μορφή πινάκων ή σχέσεων.
Το επόμενο βήμα είναι να στρέψουμε την προσοχή μας στις πλευρές που αφορούν το χειρισμό και να βρούμε τρόπους να περιγράψουμε πώς το σχεσιακό μοντέλο αναπαριστά το χειρισμό των δεδομένων με ορισμένες πράξεις πάνω στις σχέσεις.
Υπάρχουν πολλές τέτοιες πράξεις (π.χ. δημιουργία- create, ενημέρωση-update, διαγραφή-delete κλπ.). 4 Το σύνολο των εντολών της SQL Η SQL αποτελεί μια στάνταρτ γλώσσα του ANSI για να μπορούμε να έχουμε πρόσβαση σε βάσεις δεδομένων.
Το σύνολο των εντολών της SQL που υποστηρίζει η ORACLE μας επιτρέπει:
Να διαχειριστούμε τα δικαιώματα των χρηστών.
Να προσθέσουμε (GRANT) και να αφαιρέσουμε (REVOKE) δικαιώματα σε κάποιο πίνακα, χώρο δεδομένων κλπ
Να διαχειριστούμε τις συναλλαγές που πραγματοποιούνται στη ΒΔ.
Να εκτελέσουμε μια συναλλαγή (TRANSACTION) που θα αλλάξει μόνιμα την κατάσταση των δεδομένων (COMMIT) καθώς και να επιστρέψουμε σε προηγούμενη κατάσταση (ROLLBACK) αναιρώντας τη συναλλαγή, ή ορίσουμε ένα ενδιάμεσο σημείο της συναλλαγής (SAVEPOINT).
Να δημιουργήσουμε νέους χρήστες, πίνακες, όψεις, σκανδάλες κλπ (CREATE), να τροποποιήσουμε τους ήδη υπάρχοντες (ALTER) και να καταργήσουμε όσους δεν χρειαζόμαστε πλέον (DROP).
Να μετονομάσουμε ένα πίνακα ή μια στήλη (RENAME), να ανακτήσουμε τον χώρο που αποδεσμεύεται σε ένα πίνακα
Να διαχειριστούμε τα περιεχόμενα της ΒΔ.
Να εισάγουμε (INSERT), ενημερώσουμε (UPDATE), διαγράψουμε (DELETE) και συγχωνεύσουμε (MERGE) E) Να επιλέξουμε δεδομένα (SELECT) από τους πίνακες και της όψεις της ΒΔ.
Στη συνέχεια θα χρησιμοποιήσουμε για παράδειγμα τις σχέσεις Employees, Departments και JOB_GRADES
5 Δημιουργία του σχήματος – Η εντολή CREATE Ανάμεσα στα αντικείμενα που μπορούμε να δημιουργήσουμε σε μια ΒΔ είναι: Οι πίνακες: που περιέχουν γραμμές και στήλες (πλειάδες και γνωρίσματα) Οι όψεις: που οργανώνουν λογικά δεδομένα από έναν ή περισσότερους πίνακες Οι ακολουθίες: που παράγουν αριθμούς Τα ευρετήρια: που επιταχύνουν την εκτέλεση των ερωτημάτων Τα συνώνυμα: που δίνουν εναλλακτικά ονόματα στα υπάρχοντα αντικείμενα
Ένας πίνακας μπορεί να δημιουργηθεί οποιαδήποτε στιγμή στη ΒΔ και το μέγεθος που θα καταλαμβάνει ορίζεται δυναμικά.
Η δομή του πίνακα ορίζεται κατά τη στιγμή της δημιουργίας αλλά μπορεί να αλλάξει.
Για να ορίσουμε ένα πίνακα πρέπει:  Να του δώσουμε όνομα: Το όνομα πρέπει να ξεκινά με γράμμα, να είναι μέχρι 30 χαρακτήρες, να περιέχει τους χαρακτήρες Α-Ζ, a-z, 0-9, _, $, #, να μην επαναλαμβάνεται στο ίδιο σχήμα και να μην είναι δεσμευμένη λέξη της ΒΔ.  Να του ορίσουμε τα πεδία, τον τύπο τους και το μέγεθός τους  Να του ορίσουμε επιπλέον περιορισμούς ακεραιότητας
Συγκεκριμένα η σύνταξη της εντολής δημιουργίας πίνακα έχει ως εξής: Όπου τα πεδία σε αγκύλες [] είναι προαιρετικά και συγκεκριμένα: schema είναι το ίδιο με το όνομα του ιδιοκτήτη της βάσης table είναι το όνομα του πίνακα
DEFAULT expr καθορίζει την προκαθορισμένη τιμή για ένα πεδίο column το όνομα της στήλης datatype ο τύπος και το μέγεθός του για τη συγκεκριμένη στήλη
Το πεδίο expr στην προκαθορισμένη τιμή ενός πεδίου μπορεί να είναι τιμή (αριθμός, ημερομηνία, κείμενο κλπ) ή άλλο πεδίο του σχήματος αρκεί να ικανοποιεί τους περιορισμούς τύπου για το αντίστοιχο πεδίο.
Για τη δημιουργία ενός πίνακα που θα περιέχει τις πληροφορίες για ένα ΤΜΗΜΑ Για να δούμε την περιγραφή του πίνακα
Δημιουργία πίνακα από ερώτημα Ένας πίνακας μπορεί να δημιουργηθεί από το αποτέλεσμα μιας ερώτησης (π.χ. επιλογή ορισμένων μόνο πεδίων κάποιου άλλου πίνακα).
Η σύνταξη της εντολής έχει Για τη δημιουργία ενός πίνακα με τους υπαλλήλους ενός συγκεκριμένου τμήματος
Εκτός από τους πίνακες των χρηστών, υπάρχουν και πίνακες που αποθηκεύουν μεταπληροφορίες για τη ΒΔ.
Οι πίνακες αυτοί αναφέρονται και ως data dictionaries και χωρίζονται σε 4 βασικές κατηγορίες.
Τα ονόματα των πινάκων κάθε κατηγορίας έχουν την ίδια αρχή.
Συγκεκριμένα: USER_ : Περιέχουν πληροφορίες για τα αντικείμενα ΒΔ που ανήκουν στο χρήστη ALL_ : Περιέχουν πληροφορίες για όλους του πίνακες στους οποίους έχει DBA_ : Περιέχουν πληροφορίες που μπορούν να τις δουν μόνο οι διαχειριστές της V$ : Περιέχουν στοιχεία που χρειάζονται στην δυναμική λειτουργία και στις επιδόσεις της ΒΔ (dynamic performance views, database server performance, memory, και
Για να δούμε τους πίνακες ενός χρήστη: Για να δούμε τα αντικείμενα που έχει πρόσβαση ο χρήστης: Για να δούμε πίνακες, όψεις, συνώνυμα και ακολουθίες που ανήκουν στο χρήστη:
Οι βασικοί τύποι δεδομένων που υποστηρίζονται από την ORACLE απεικονίζονται στον ακόλουθο πίνακα: Τύπος δεδομένων Περιγραφή VARCHAR2(size) Πεδίο χαρακτήρων μεταβλητού μεγέθους CHAR(size) Πεδίο χαρακτήρων σταθερού μεγέθους
NUMBER(p,s) Αριθμητικό πεδίο μεταβλητού μεγέθους με ακρίβεια p (1..38) και κλίμακα s (- DATE Ημερομηνία από January 1, 4712 TIMESTAMP Ημερομηνία με κλάσματα δευτερολέπτου INTERVAL YEAR TO MONTH Ημερομηνία ως διάστημα χρόνων και INTERVAL DAY TO SECOND Ημερομηνία ως ημέρες, ώρες, λεπτά LONG Πεδίο χαρακτήρων μεταβλητού μεγέθους
CLOB Πεδίο χαρακτήρων (ως 4 Gbytes)
RAW και LONG RAW Δεδομένα binary (ως 2000 ή 2Gbytes) BLOB Δεδομένα binary (ως 4Gbytes) BFILE Δεδομένα binary σε εξωτερικό αρχείο ROWID Μοναδικός αριθμός στο 64δικό σύστημα
Για τον πίνακα υπαλλήλων με ακρίβεια 6 δεκαδικών του δευτερολέπτου στην
Αλλαγή της δομής ενός πίνακα – ALTER TABLE Η αλλαγή στη δομή ενός πίνακα μπορεί να αφορά: - Αλλαγή στις στήλες:
Αλλαγή (ονόματος, τύπου, περιορισμών):
Και στη συνέχεια διαγραφή των αχρηστευμένων στηλών
Για τον πίνακα με τους υπαλλήλους ενός τμήματος.
Προσθέτουμε μια επιπλέον στήλη: Αλλάζουμε τον τύπο μιας άλλης στήλης: Καταργούμε μια στήλη:
Κατάργηση ενός πίνακα – DROP TABLE H κατάργηση ενός πίνακα συνεπάγεται την ολοκλήρωση όλων των συναλλαγών, την κατάργηση όλων των σχετικών ευρετηρίων και φυσικά την οριστική διαγραφή των δεδομένων που περιείχε.
Μετονομασία ενός πίνακα – RENAME Επιτρέπεται μόνο στον ιδιοκτήτη του πίνακα Συρρίκνωση του πίνακα - TRUNCATE Αφαιρεί όλες τις εγγραφές του πίνακα και αποδεσμεύει το χώρο που καταλάμβαναν.
Δεν είναι δυνατό να αναιρεθεί.
6 Οι εντολές επιλογής (SELECT) Επιλογή όλων των πεδίων ενός πίνακα και όλων των εγγραφών τους
Βασική σύνταξη της SELECT
Επιλογή όλων των πεδίων του πίνακα Departments και όλων των εγγραφών τους
Η προβολή ορισμένων μόνο πεδίων μπορεί να οδηγήσει στην εμφάνιση διπλότυπων εγγραφών.
Στην περίπτωση αυτή ο όρος DISTINCT εξαφανίζει τα
Έχουμε τη δυνατότητα να μετονομάσουμε τα πεδία που προβάλουμε και να αλλάξουμε τη μεταξύ τους διάταξη
Μπορούμε να κάνουμε πράξεις στα περιεχόμενα ενός πεδίου
Μπορούμε να συγχωνεύσουμε τα περιεχόμενα δύο πεδίων
Μας επιτρέπει να επιλέξουμε ορισμένες μόνο πλειάδες (εγγραφές) από ένα πίνακα, ορίζοντας τα κριτήρια επιλογής στα πεδία που μας ενδιαφέρουν.
Βασική σύνταξη των ερωτημάτων επιλογής Δεν είναι απαραίτητο τα κριτήρια να εφαρμόζονται στα πεδία προβολής
Κριτήρια σε αριθμητικά πεδία
Κριτήρια σε πεδία κειμένου
Κριτήρια σε πεδία ημερομηνίας
Επιπλέον τελεστές σύγκρισης BETWEEN...AND...
Μεταξύ δύο τιμών (που συμπεριλαμβάνονται) IN(set) Οποιαδήποτε από τις τιμές στο SET LIKE Όμοιο με ένα πρότυπο χαρακτήρων
IS NULL Η τιμή NULL: IS NULL ή IS NOT NULL
Προτεραιότητα τελεστών (φθίνουσα σειρά)
Για παράδειγμα στο ακόλουθο ερώτημα θα δοθεί προτεραιότητα στις συγκρίσεις, έπειτα στο AND και τέλος στο OR
Η χρήση παρανθέσεων βάζει τα πράγματα στη σειρά
Τα αποτελέσματα μιας ερώτησης μπορούν να ταξινομηθούν ως προς ένα ή περισσότερα (δευτερεύοντα) πεδία ταξινόμησης με αύξουσα (ASCending) ή φθίνουσα (DESCending) σειρά.
Τα πεδία ταξινόμησης μπορεί να μην ανήκουν στα πεδία προβολής.
Γίνεται με τη χρήση της δήλωσης ORDER BY.
Αν δεν ορίσουμε τη σειρά, επιλέγεται αυτόματα αύξουσα ταξινόμηση.
Γενική σύνταξη της εντολής επιλογής και προβολής με ταξινόμηση
Μπορούμε να ταξινομήσουμε πεδία με χρήση των συνωνύμων τους Μπορούμε να ταξινομήσουμε τις πλειάδες που έχουν ίδιες τιμές ως προς το πρώτο πεδίο ταξινόμησης ως προς κάποιο άλλο πεδίο (δευτερεύουσα ταξινόμηση).
Ταξινομεί τους υπαλλήλους με βάση το τμήμα και για ίδιο τμήμα με αύξουσα σειρά
Χρήση συναρτήσεων στην SQL
Συναρτήσεις μιας εγγραφής Επεμβαίνουν στα περιεχόμενα ενός πεδίου και τα τροποποιούν για κάθε εγγραφή.
Συναρτήσεις σε πεδία χαρακτήρων Μπορούν να αλλάξουν την κεφαλαιοποίηση των περιεχομένων LOWER (μετατροπή όλων σε μικρά), UPPER (μετατροπή όλων σε κεφαλαία), INITCAP (το πρώτο γράμμα κεφαλαίο)
Συναρτήσεις σε μεμονωμένους χαρακτήρες
Συνάρτηση Ερμηνεία Αποτέλεσμα CONCAT('Hello', 'World') Συγχώνευση HelloWorld SUBSTR('HelloWorld',1,5) Αποκοπή (υποσειρά) Hello LENGTH('HelloWorld') Εύρεση μήκους 10 INSTR('HelloWorld', 'W') Θέση πρώτης εμφάνισης 6
LPAD(salary,10,'*') Συμπλήρωση κενών με
TRIM('H' FROM 'HelloWorld') Αποκοπή άκρων elloWorld Παράδειγμα: Επιλέγει τον κωδικό, το ονοματεπώνυμο, την εργασία, το μήκος του επωνύμου τους, την πρώτη θέσε εμφάνισης του 'a' στο επώνυμο για τους υπαλλήλους που το job_id τους, μετά την αφαίρεση ενός προθέματος 3 χαρακτήρων, είναι REP
Συναρτήσεις σε αριθμητικά πεδία ROUND(column|expression,n) στρογγυλοποιεί την τιμή στα n δεκαδικά ψηφία TRUNC(column|expression,n) αποκόβει μια τιμή στα n δεκαδικά ψηφία MOD(m,n) επιστρέφει το υπόλοιπο της διαίρεσης m/n Παραδείγματα με χρήση του δοκιμαστικού πίνακα DUAL της ORACLE
Συναρτήσεις σε πεδία ημερομηνιών Οι ημερομηνίες στην ORACLE αποθηκεύονται ως εξής:
SYSDATE Date (Ημερομηνία συστήματος) date+number Date (προσθέτει ημέρες) date-number Date (αφαιρεί ημέρες) date-date Number (Διαφορά σε ημέρες) date+number/24 Date (προσθέτει ώρες) MONTHS_BETWEEN (date1, date2) Βρίσκει τη διαφορά σε μήνες ADD_MONTHS(date, n) Προσθέτει μέρες NEXT_DAY(date, 'char') Βρίσκει την ημερομηνία της επόμενης 'char' από την ημερομηνία date (π.χ. επόμενης LAST_DAY (date) Βρίσκει την τελευταία μέρα του ίδιου μήνα ROUND(date[,'fmt']) Στρογγυλεύει μια ημερομηνία στο TRUNC(date[, 'fmt']) Αποκόβει μια ημερομηνία στο καθορισμένο
Συναρτήσεις μετατροπής τύπου Αυτόματα γίνονται οι μετατροπές
Μετατροπή από DATE σε CHAR Όπου το format_model μπορεί να είναι YYYY Πλήρες έτος YEAR Έτος με λέξη MM Μήνας με δύο ψηφία ΜΟΝ Μήνας με 3 γράμματα DAY Ημέρα με λέξη DD Ημέρα μήνα με δύο ψηφία
B) Μετατροπή από NUMBER σε CHAR 9 Εμφανίζει τον αριθμό L Εμφανίζει τη νομισματική μονάδα.
Τυπώνει την υποδιαστολή (.) , Τυπώνει το διαχωριστικό των χιλιάδων (,)
NVL (expr1, expr2) Δίνει στα null της expr1 τιμές από την NVL2 (expr1, expr2, expr3) Δίνει στα null της expr1 τιμές από την expr3 και στα υπόλοιπα τιμές από την NULLIF (expr1, expr2) Δίνει null αν οι expr1 και expr2 είναι ίσες COALESCE (expr1, expr2, ..., exprn) Επιστρέφει την πρώτη not null έκφραση
Η CASE και η DECODE χρησιμοποιούνται για να αντικαταστήσουν πολλαπλές συνθήκες επιλογής (If, ElseIf, Else)
Μας επιτρέπει να επιλέξουμε δεδομένα από πολλούς πίνακες.
Καρτεσιανό γινόμενο ΑxB: Περιέχει όλους τους δυνατούς συνδυασμούς των πλειάδων του Α με τις πλειάδες του Β.
Αν ο Α περιέχει 20 πλειάδες και ο Β 30, τότε το καρτεσιανό τους γινόμενο έχει 600 πλειάδες.
Το καρτεσιανό γινόμενο προκύπτει αν δεν βάλουμε κανένα περιορισμό στις πλειάδες Έστω ότι έχουμε τους πίνακες Employees και Departments.
Το καρτεσιανό γινόμενο θα δώσει μια σχέση που θα περιέχει τόσες φορές τα στοιχεία κάθε υπαλλήλου όσα
Σύμφωνα με το πρότυπο SQL-99, οι τύποι συνένωσης είναι:  Συνένωση διασταύρωσης (Cross joins)  Φυσική συνένωση (Natural joins)  Συνένωση με χρήση πεδίου (Using clause)  Πλήρης ή διπλή εξωτερική συνένωση (full or two sided outer join)  Εξωτερική συνένωση με αυθαίρετες συνθήκες (Arbitrary join conditions for Επιπλέον η Oracle υποστηρίζει τους εξής τύπους  Συνένωση ισότητας (Equijoin)  Συνένωση ανισότητας (Non-equijoin)  Εξωτερική συνένωση (Outer join)  Αυτό συνένωση (Self join)
Η βασική σύνταξη του JOIN στην ORACLE έχει ως εξής:
Όπου η συνθήκη συνένωσης γράφεται στο WHERE και τα ονόματα των πινάκων χρησιμοποιούνται για να αποσαφηνίσουν διπλότυπα ονόματα πεδίων (π.χ.
Department_ID υπάρχει και στον Employee και στον Department)
Γίνεται συνήθως μεταξύ του πρωτεύοντος κλειδιού μιας σχέσης και του εξωτερικού κλειδιού της άλλης σχέσης που αναφέρεται σε αυτό.
Μας επιτρέπει να επιλέξουμε από το καρτεσιανό γινόμενο μόνο τις πλειάδες εκείνες που προέρχονται από το συνδυασμό πλειάδων με πραγματική εξάρτηση.
Στη συνένωση μεταξύ Employees και Departments μας ενδιαφέρει να επιλέξουμε κατά τη συνένωση μόνο το τμήμα στο οποίο εργάζεται ένας υπάλληλος και όχι όλα τα τμήματα και αυτό για κάθε υπάλληλο.
Το ερώτημα ισοδύναμης συνένωσης πρέπει στο WHERE να ορίζει τη συνθήκη συνένωσης (την ισότητα τιμών μεταξύ πρωτεύοντος κλειδιού του Departments και εξωτερικού κλειδιού του Employees).
Επιπλέον κριτήρια προβολής και επιλογής Αν θέλουμε να προβάλουμε ορισμένα μόνο πεδία από το αποτέλεσμα της συνένωσης τροποποιούμε κατάλληλα το SELECT
Αν θέλουμε να επιλέξουμε ορισμένες μόνο πλειάδες από το αποτέλεσμα της συνένωσης προσθέτουμε με AND τα κριτήρια επιλογής στο WHERE
Χρήση επωνυμιών (alias) Όταν τα ονόματα των πεδίων από τους πίνακες που συνενώνουμε συμπίπτουν: - προσθέτουμε το όνομα του πίνακα μπροστά από κάθε διφορούμενο πεδίο για να - για να συντομεύσουμε το ερώτημα, δίνουμε σύντομες επωνυμίες στους πίνακες - δίνουμε επωνυμίες (aliases) στα πεδία του αποτελέσματος Συνένωση περισσοτέρων από ενός πίνακες Για τη συγχώνευση ν πινάκων χρειαζόμαστε ν-1 συνθήκες συγχώνευσης
Συμβαίνει όταν η συνθήκη συνένωσης περιέχει ανισότητα.
Στην περίπτωση αυτή έχουμε και πάλι συνένωση (καρτεσιανό γινόμενο και επιλογή) στην οποία επιλέγονται οι πλειάδες που ικανοποιούν την ανισότητα ή τη συνθήκη πεδίου Θέλουμε να ενώσουμε τους υπαλλήλους, με τις βαθμίδες με δεδομένο ότι οι βαθμίδες ορίζουν το άνω και κάτω όριο:
Δεν εμφανίζονται διπλότυπα υπαλλήλων με διαφορετικές τιμές στη βαθμίδα.
Αυτό  Καμία εγγραφή του πίνακα με τις βαθμίδες δεν έχει επικάλυψη με τις υπόλοιπες.
Ένας μισθός προσδιορίζει μία μόνο βαθμίδα.  Όλοι οι υπάλληλοι έχουν μισθό εντός των ορίων που θέτει ο πίνακας Job_Grades.
Κάθε μισθός προσδιορίζει τουλάχιστον μία βαθμίδα.
Πραγματοποιεί και πάλι συνένωση, λαμβάνοντας παράλληλα υπόψη τις πλειάδες κάθε πίνακα που δεν αντιστοιχία στον άλλο.
Για τις πλειάδες αυτές συμπληρώνει με κενές τιμές.
Διακρίνεται σε LEFT ή RIGHT ανάλογα με το αν οι "ορφανές" πλειάδες του αριστερού ή δεξιού πίνακα παραμένουν στο τελικό αποτέλεσμα.
Περιορισμοί στο outer join: - Πρέπει να εμφανίζεται στη μία μόνο πλευρά της συνένωσης. - Μια συνθήκη που περιέχει εξωτερική συνένωση δεν μπορεί να χρησιμοποιεί τον τελεστή IN ή να συνδέεται με μια άλλη συνθήκη με OR.
Η γενική σύνταξη του OUTER JOIN έχει ως εξής Θέλουμε να ενώσουμε τους υπαλλήλους με τα τμήματα εμφανίζοντας και εκείνα τα τμήματα που δεν έχουν κανένα υπάλληλο.
Χρησιμοποιείται σε αναδρομικές σχέσεις πινάκων και κάνει συνένωση ενός πίνακα με τον εαυτό του στο πεδίο συνένωσης.
Ο πίνακας εμφανίζεται δύο φορές με διαφορετική επωνυμία και το κριτήριο συνένωσης ορίζεται στα δύο επώνυμα.
Θέλουμε να επιλέξουμε τους υπαλλήλους και το διευθυντή τους (που βρίσκονται στον ίδιο πίνακα EMPLOYEES)
Συνένωση πινάκων με σύνταξη SQL-1999 Η γενική σύνταξη για τα ερωτήματα συνένωσης είναι: Στη συνέχεια θα δούμε τη σύνταξη ορισμένων επιπλέον συνενώσεων που υποστηρίζει Η σταυρωτή συνένωση δημιουργεί το καρτεσιανό γινόμενο δύο πινάκων.
Απλά είναι περισσότερο περιγραφικό από ότι το αντίστοιχο καρτεσιανό.
Η φυσική συνένωση βασίζεται στα κοινά ονόματα πεδίων των πινάκων που θα συνενωθούν.
Αντιστοιχεί στην συνένωση ισότητας όπου η ισότητα ορίζεται εξορισμού στα πεδία των δύο πινάκων που έχουν ίδια ονόματα.
Αν τα αντίστοιχα πεδία είναι διαφορετικού τύπου, επιστρέφεται σφάλμα.
Μπορούν φυσικά να περιέχουν επιπλέον κριτήρια επιλογής στα αποτελέσματα της συνένωσης (στο where) Επιλέγω τα τμήματα και τις πόλεις στις οποίες βρίσκονται.
Η συνένωση ορίζεται αυτόματα στο location_id
Συνένωση με χρήση του USING ή του ΟΝ Μας επιτρέπει να ορίσουμε πια πεδία θα συνενωθούν για την συνένωση ισότητας.
Προτιμάται της φυσικής συνένωσης όταν:  οι τύποι των πεδίων με τα κοινά ονόματα διαφέρουν.  Όταν κανένα πεδίο δε συμφωνεί στο όνομα με τα πεδία του άλλου πίνακα Αποφεύγει να χρησιμοποιήσει επωνυμίες (alias) πινάκων στα πεδία αναφοράς.
Επιλέγουμε και πάλι τους υπαλλήλους και τα τμήματα που εργάζονται Ισοδύναμα μπορούσαμε να γράψουμε
Παρόμοια χρησιμοποιείται και η πρόταση ON που διευκολύνει την ανάγνωση του
Παρόμοια χρησιμοποιείται η ON για να συνενώσει πάνω από δύο πίνακες: Που έχει τα ίδια αποτελέσματα με την
Σε συμπλήρωμα της εσωτερικής συνένωσης, η εξωτερική συνένωση περιέχει επιπλέον τις ορφανές εγγραφές του αριστερού πίνακα (left outer) ή τις ορφανές εγγραφές του δεξιού πίνακα (right outer) ή και τις δύο (full outer)
Που δεν έχει ισοδύναμο στην SQL-99 8 Συναρτήσεις πολλών εγγραφών Η ομαδοποίηση των πλειάδων με βάση τις κοινές τιμές τους σε κάποιο (κάποια) πεδίο έχει ως αποτέλεσμα στα υπόλοιπα πεδία να εμφανίζονται σύνολα διαφορετικών τιμών.
Σκοπός των συναρτήσεων πολλών εγγραφών (aggregate functions) είναι να επέμβουν στα αποτελέσματα της ομαδοποίησης των πλειάδων και να δώσουν αντί για το σύνολο τιμών, μια επεξεργασμένη τιμή (πλήθος, μέσο όρο, άθροισμα κλπ των
Η συναρτήσεις που μπορεί να χρησιμοποιηθούν με τις λεπτομέρειες σύνταξής τους
AVG([DISTINCT|ALL]n) Βρίσκει τη μέση τιμή αγνοώντας τα Null COUNT({*|[DISTINCT|ALL]expr}) Βρίσκει το πλήθος εγγραφών που το expr δεν είναι null (μετρά όλες τις πλειάδες – διπλότυπα και null- αν MAX([DISTINCT|ALL]expr) Βρίσκει τη μέγιστη τιμή του expr MIN([DISTINCT|ALL]expr) Βρίσκει την ελάχιστη τιμή του expr STDDEV([DISTINCT|ALL]x Βρίσκει την τυπική απόκλιση τιμή του x, SUM([DISTINCT|ALL]n Βρίσκει το άθροισμα του n, αγνοώντας VARIANCE([DISTINCT|ALL]x Βρίσκει τη διακύμανση του n,
Η γενική σύνταξη των εντολών συνάθροισης είναι
Υπολογισμός μέσου όρου αγνοώντας τα null
Υπολογισμός μέσου όρου μετρώντας υποχρεωτικά και τα null (λόγω NVL) δίνοντας
ΠΡΟΣΟΧΗ στη χρήση της ομαδοποίησης  Όσα από τα πεδία της σχέσης δε συμμετέχουν στο κριτήριο ομαδοποίησης αλλά εμφανίζονται στην προβολή θα πρέπει (στην προβολή) να βρίσκονται εντός μιας συνάρτησης πολλών εγγραφών  Οι συναρτήσεις πολλών εγγραφών δεν εμφανίζονται στο WHERE  Έχουν δική τους περιοχή (HAVING) μέσα στο ερώτημα
Παράδειγμα λανθασμένης ομαδοποίησης
Στην τελευταία περίπτωση το σωστό ερώτημα είναι:
Συνεπώς η πλήρης σύνταξη είναι:
Εμφανίζονται σε ένα ερώτημα και καθορίζουν μια τιμή (ή μια λίστα τιμών) ως προς την οποία θα οριστεί το εξωτερικό ερώτημα.
Εκτελείται πρώτα το φωλιασμένο ερώτημα και στη συνέχεια το εξωτερικό. - Στο WHERE (συνηθέστερα)
Φωλιασμένα ερωτήματα που επιστρέφουν μία τιμή Αν εμφανίζονται στο WHERE τότε η τιμή αποτελεί το κριτήριο του WHERE. - Οι τελεστές σύγκρισης με τιμή μπορεί να ελέγξουν ισότητα ή ανισότητα. - Εμφανίζονται στη δεξιά μεριά του τελεστή σύγκρισης.
ΠΡΟΣΟΧΗ: Να είμαστε σίγουροι ότι το MIN επιστρέφει μία ακριβώς τιμή.
Δεν ισχύει όταν υπάρχουν δύο πλειάδες με ελάχιστο μισθό.
Δεν ισχύει αν το φωλιασμένο ερώτημα δε φέρει πλειάδες
Φωλιασμένα ερωτήματα που επιστρέφουν σύνολο Οι τελεστές μπορεί να ελέγξουν : - αν οι τιμές στο αριστερό μέλος περιέχονται στο σύνολο που επιστρέφει το - αν οι τιμές στο αριστερό μέλος δεν περιέχονται στο σύνολο που επιστρέφει το φωλιασμένο ερώτημα (NoT IN) - αν οι τιμές στο αριστερό μέλος είναι μικρότερες (ή μεγαλύτερες) από έστω μια τιμή στο σύνολο που επιστρέφει το φωλιασμένο ερώτημα (> ΑΝΥ) - αν οι τιμές στο αριστερό μέλος είναι μικρότερες (ή μεγαλύτερες) από κάθε τιμή στο σύνολο που επιστρέφει το φωλιασμένο ερώτημα (> ΑLL) Επιλέγω τους υπαλλήλους που έχουν μισθό μεγαλύτερο από το μισθό κάποιου (οποιουδήποτε-ANY) προγραμματιστή
Επιλέγω τους υπαλλήλους που έχουν μισθό μικρότερο από το μισθό κάθε (όλων-
Η βασική σύνταξη του ερωτήματος εισαγωγής είναι:
Θα πρέπει για τις τιμές που εισάγονται: - Να αντιστοιχούν με τα πεδία που δηλώνονται στο INTO - Να συμβαδίζουν με τον τύπο και τις επιτρεπτές τιμές του αντίστοιχου πεδίου - Να μην παραβιάζουν περιορισμούς υποχρεωτικών πεδίων (not null) - Να μην παραβιάζουν περιορισμούς διπλοτύπων (unique) γενικά ή στο - Να μην παραβιάζουν τους περιορισμούς της ακεραιότητας αναφορών (π.χ. να μην εισάγονται τιμές
Εισαγωγή νέου τμήματος
Εισαγωγή ειδικών τιμών
NULL: που δίνει NULL τιμή στο αντίστοιχο πεδίο
SYSDATE: που δίνει την τρέχουσα ημερομηνία και ώρα του συστήματος
