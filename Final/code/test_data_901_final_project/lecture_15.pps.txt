Προγραμματισμός II
Για το πρόγραμμα που ακολουθεί να περιγραφεί αναλυτικά η λειτουργία του, να δοθούν τα αποτελέσματα και να απεικονισθεί το περιεχόμενο των θέσεων μνήμης που καταλαμβάνουν οι μεταβλητές σε κάθε γραμμή κώδικα.
} // Τέλος της func
} // Τέλος της for
} // Τέλος της main
Δημιουργείται και αρχικοποιείται κατά την πρώτη κλήση της συνάρτησης.
Εφεξής παραμένει στη μνήμη, διατηρώντας την τιμή που απέκτησε κατά την τελευταία κλήση τής func.
Να γραφεί πρόγραμμα, το οποίο:
(α) Θα διαβάζει έως το τέλος του το δυαδικό αρχείο input_file.txt, στο οποίο βρίσκονται αποθηκευμένοι ακέραιοι αριθμοί, και θα υπολογίζει το πλήθος τους, το οποίο θα αποθηκεύει στην ακέραια μεταβλητή size. (Υπόδειξη: Για να διαβασθούν τα δεδομένα ένα προς ένα έως το τέλος του αρχείου, χωρίς να είναι γνωστός εκ των προτέρων ο αριθμός τους, μπορεί να χρησιμοποιηθεί ένας πίνακας μίας θέσης, π.χ. arr[1], ως προσωρινός χώρος αποθήκευσης του δεδομένου σε κάθε κλήση της fread(). Λάβετε υπόψη ότι η fread() επιστρέφει έναν ακέραιο που ισούται με τον αριθμό των δεδομένων που ανεγνώσθησαν σε κάθε κλήση της, ανεξάρτητα του αριθμού των δεδομένων που ζητήθηκε να αναγνωσθούν).
(β) Θα δεσμεύει μνήμη για size ακέραιους αριθμούς με χρήση της συνάρτησης malloc(). Τη μνήμη θα διαχειρίζεται ο δείκτης σε ακέραιο με όνομα array_ptr.
(γ) Θα διαβάζει εκ νέου το αρχείο input_file.txt, αποδίδοντας τους ακεραίους που περιέχει στον πίνακα array_ptr.
(δ) Στη συνέχεια θα καλείται η συνάρτηση void pwr(int *array, int array_size), η οποία θα μεταβάλλει τις τιμές των δεδομένων που διαχειρίζεται ο δείκτης array, υψώνοντας στο τετράγωνο κάθε δεδομένο (κλήση της συνάρτησης μέσα στη main(): pwr(array_ptr, size);).
(ε) H main() θα τελειώνει με την εγγραφή στο δυαδικό αρχείο output_file.txt των νέων τιμών των στοιχείων του πίνακα array_ptr, και την απελευθέρωση της δεσμευθείσας μνήμης με χρήση της συνάρτησης free().
Σημείωση: H ανάγνωση από αρχείο και η εγγραφή σε αρχείο να γίνεται με χρήση των συναρτήσεων fread(), fwrite().Το δυαδικό αρχείο input_file.txt θεωρείται πως προϋπάρχει.
/* Ο πίνακας array[1] χρησιμοποιείται για να μπορέσουμε στο πρώτο σκέλος να διαβάσουμε ένα προς ένα τα δεδομένα και να υπολογίσουμε τον αριθμό του*/
// 1ο σκέλος
while (fread(array,sizeof(int),1,f1)) size++; /* Όσο η fread() δίνει έξοδο διάφορη του μηδενός, δηλαδή διαβάζει ένα στοιχείο, συνέχισε να διαβάζεις από το αρχείο και αύξανε το μετρητή των στοιχείων που περιέχονται σε αυτό*/
// 2ο σκέλος
// 3ο σκέλος
// 4ο σκέλος
// 5ο σκέλος
// Εναλλακτικά: *(array_address+i)=*(array_address+i)*(*(array_address+i));
} // Τέλος της pwr
Τα αποτελέσματα που ακολουθούν εξάγονται εάν προστεθεί πριν και μετά το 4ο σκέλος ο ακόλουθος κώδικας:
και
Για το πρόγραμμα που ακολουθεί να περιγραφεί αναλυτικά η λειτουργία του και να απεικονισθεί το περιεχόμενο των θέσεων μνήμης που καταλαμβάνουν οι μεταβλητές σε κάθε γραμμή κώδικα.
Χάριν απλότητας να θεωρηθεί ότι οι μεταβλητές καταλαμβάνουν διαδοχικές θέσεις μνήμης.
Να δοθούν οι εντολές δυναμικής δέσμευσης και απελευθέρωσης μνήμης για έναν πίνακα ακεραίων 3x2x3.
Να δοθούν τα τμήματα του χάρτη μνήμης μετά τη δέσμευση.
//Δέσμευση
//Απελευθέρωση
Δημιουργείστε τον τύπο δεδομένου δομής time, που θα αποτελείται από τις τρεις ακέραιες μεταβλητές hour, min, sec.
Γράψτε τις ακόλουθες συναρτήσεις :
1) void scanTime( time *t ), η οποία θα λαμβάνει από το πληκτρολόγιο τιμές και θα τις αποδίδει στη μεταβλητή του ορίσματός της.
Τα αποτελέσματα θα τυπώνονται σε αρχείο file1.dat, το οποίο θα δημιουργείται και θα κλείνει μέσα στη συνάρτηση scanTime.
2) void printTime( time *t ), η οποία θα τυπώνει στην οθόνη το περιεχόμενο της μεταβλητής του ορίσματός της.
3) int TimeInSec( time *t), η οποία θα επιστρέφει σε δευτερόλεπτα τον χρόνο που ορίζει η μεταβλητή του ορίσματός της.
4) time SecInTime( int sec ), η οποία θα δέχεται στο όρισμα της τον χρόνο σε δευτερόλεπτα και θα αποδίδει στην μεταβλητή που την καλεί (μεταβλητή τύπου δομής time) το χρόνο σε ώρες, λεπτά, δευτερόλεπτα.
