Προγραμματισμός II
Δείκτες
Μπορούμε να αλλάξουμε τις τιμές που είναι αποθηκευμένες στον πίνακα nums μέσα από τη συνάρτηση clear().
Αυτό συμβαίνει γιατί το όνομα nums αναφέρεται στη διεύθυνση μνήμης, από την οποία ξεκινά ο πίνακας.
Τυπώνει x=3, y=5. Δε γίνεται η ανταλλαγή (swapping)!
Το πρόβλημα συμβαίνει επειδή απλώς αντιγράφονται οι τιμές των x και y στα ορίσματα a και b.
Άρα, τι θα γινόταν εάν μπορούσαμε με κάποιο τρόπο να ανταλλάξουμε τις διευθύνσεις των x και y;
Τότε, θα μπορούσαμε να αλλάξουμε τα x και y μέσα στη συνάρτηση swap(), όπως συνέβη με τον πίνακα.
Δήλωση δείκτη
Δείκτης: μία μεταβλητή που κρατά μία διεύθυνση.
Διεύθυν.
Περιεχόμ.
Κανονική μεταβλητή.
Όνομα: x, Τιμή: 32, Tύπος: int
Μεταβλητή δείκτη.
Όνομα: px, Τιμή: 900, Tύπος: δείκτης σε int
Λέμε ότι ο px δείχνει στην x
Φανταστείτε ένα τόξο από τη μεταβλητή δείκτη στην κανονική μεταβλητή, το οποίο δείχνει πού “δείχνει” ο δείκτης.
Ο δείκτης πρέπει να δηλωθεί:
το όνομα της μεταβλητής δείκτη.
Καλή προγραμματιστική πρακτική: το πρώτο γράμμα του ονόματος να είναι πάντοτε p
ο τύπος της μεταβλητής αποθηκεύεται στη θέση που δείχνει ο δείκτης
Προσδιορίζει ότι δηλώνεται μία μεταβλητή δείκτη
Γιατί πρέπει να δηλωθεί ο τύπος της κανονικής μεταβλητής;
Γιατί όταν δηλώνεται μία (κανονική) μεταβλητή, δεσμεύεται συγκεκριμένη μνήμη, π.χ. 8 bytes για double, 4 bytes για int.
Ο δείκτης αναφέρεται σε μία διεύθυνση, στην οποία αποθηκεύεται η τιμή μίας κανονικής μεταβλητής.
Ο δείκτης χρησιμοποιείται για να γίνεται έμμεση αναφορά σ’ αυτήν την τιμή.
Έτσι, πρέπει να γνωρίζουμε πόση ακριβώς μνήμη καταλαμβάνει αυτή η τιμή.
Πόση μνήμη καταλαμβάνει η ίδια η μεταβλητή δείκτη;
Η διεύθυνση είναι ένας ακέραιος, έτσι ο δείκτης καταλαμβάνει 4 bytes, ανεξάρτητα από τον τύπο της κανονικής μεταβλητής που δείχνει.
Η x είναι μεταβλητή τύπου double
Ο px είναι δείκτης στην x
Αναλογία με την πραγματικότητα : μία οκταμελής οικογένεια δε χρειάζεται μεγαλύτερη ταχυδρομική διεύθυνση από μία τετραμελή (ίσως μεγαλύτερο γραμματοκιβώτιο!)
Γιατί είναι απαραίτητος ο αστερίσκος;
Διότι προσδιορίζει ότι δηλώνεται μία μεταβλητή με δείκτη
κι όχι μία κανονική μεταβλητή.
ΠΡΟΣΟΧΗ : Αν και η μεταβλητή με δείκτη περιέχει μία διεύθυνση (ακέραιος αριθμός), ΔΕΝ ΕΙΝΑΙ ΙΔΙΑ με μία κανονική ακέραια μεταβλητή.
Ο μεταγλωττιστής γνωρίζει ότι η τιμή της μεταβλητής με δείκτη είναι μία συγκεκριμένη διεύθυνση μνήμης, σε αντιδιαστολή με την “κανονική” ακέραια τιμή.
Ο αστερίσκος συνδέεται με το όνομα κι όχι με τον τύπο:
int *pcount; // δείκτης σε ακεραίους, με ονομασία pcount
int *pcount, *pnum; // δείκτες σε ακεραίους, με ονομασίες pcount και pnum
int *pcount, number; /* ένας δείκτης σε ακέραιο, με ονομασία pcount και ένας ακέραιος με ονομασία number */
Πώς επιλέγεται το όνομα ενός δείκτη;
Οι ίδιες συμβάσεις που ισχύουν στις κανονικές μεταβλητές.
Ωστόσο, συνήθως ο αρχικός χαρακτήρας του ονόματος δείκτη είναι το p, έτσι ώστε το πρόγραμμα να καθίσταται περισσότερο ευανάγνωστο, καθώς με τον πρώτο χαρακτήρα φαίνεται εάν μία μεταβλητή είναι δείκτης ή όχι.
Εναλλακτικά, μπορούμε να προσθέτουμε την κατάληξη _ptr.
Παράδειγμα:
int *pcount, *count_ptr; // δείκτες σε ακεραίους
char *pword, *word_ptr; // δείκτες σε χαρακτήρες
Αρχικοποίηση δεικτών
1) Χρησιμοποιώντας πίνακα
(Υπενθύμιση:το όνομα ενός πίνακα είναι μία διεύθυνση.
2) Χρησιμοποιώντας άλλους δείκτες ίδιου τύπου
3) Χρησιμοποιώντας αριθμητική δεικτών
Πήγαινε δύο θέσεις πιο κάτω (με περιεχόμενο ακεραίου)
4) Χρησιμοποιώντας τον τελεστή διεύθυνσης & (address-of operator)
H γραμμή αυτή αναφέρει: ο pnum να λάβει ως τιμή τη διεύθυνση της μεταβλητής count, δηλαδή ο δείκτης pnum να “δείχνει” στη μεταβλητή count.
Ακολούθως φαίνεται πώς μπορούμε να προσπελάσουμε την τιμή μίας μεταβλητής με τη χρήση δείκτη.
Ο αστερίσκος ονομάζεται τελεστής περιεχομένου (dereferencing operator).
Διαβάζεται “στη διεύθυνση”.
Χρησιμοποιείται για να προσπελαύνει τα περιεχόμενα της θέσης μνήμης στην οποία δείχνει ο δείκτης.
Δε θα πρέπει να συγχέεται με τον αστερίσκο της δήλωσης δείκτη.
Εφαρμογή δεικτών
Στο παράδειγμα της συνάρτησης swap() κατέστη φανερό ότι
έπρεπε να γίνουν διορθώσεις:
Μπορούμε να χρησιμοποιήσουμε δείκτες για να μεταβάλλουμε έμμεσα τις τιμές των μεταβλητών της main() μέσα από τη συνάρτηση swap().
Γνωρίζουμε πλέον:
Πώς ορίζονται οι δείκτες.
Πώς τους αρχικοποιούμε με τη διεύθυνση μίας μεταβλητής.
Πώς προσπελαύνουμε την τιμή της μεταβλητής.
Τα ορίσματα της συνάρτησης είναι τώρα δείκτες σε ακέραιες μεταβλητές.
Θα χρησιμοποιήσουμε μαύρο χρώμα για τις τοπικές μεταβλητές της main() και μπλε για τις τοπικές μεταβλητές της swap().
Απεικόνιση της μνήμης
Αντίγραφο της τιμής της py
Επεξηγήσεις:
Αν και η συνάρτηση swap() δεν επιστρέφει τίποτε άμεσα στη main(), έχει μία παρενέργεια (side effect).
Όταν καλείται η swap(), τα ορίσματά της είναι οι δείκτες px και py, οι οποίες σχετίζονται με τις διευθύνσεις των x και y, αντίστοιχα.
Παρατήρηση: δε χρειάζεται να δηλώσουμε τους δείκτες px και py.
Το μόνο που απαιτείται είναι να περασθούν οι διευθύνσεις των x και y στη swap(), όπως φαίνεται ακολούθως:
Λειτουργεί με τον ίδιο τρόπο που λειτουργούσε το πρόγραμμα με τους px και py.
Συναρτήσεις και Δείκτες
Οι πραγματικές παράμετροι που είναι δείκτες αντιγράφουν μία διεύθυνση στις παραμέτρους της συνάρτησης, αλλά εάν αλλαχθεί η παράμετρος στη συνάρτηση (δηλ. η διεύθυνση) ΔΕ θα αλλαχθεί η πραγματική παράμετρος !!
