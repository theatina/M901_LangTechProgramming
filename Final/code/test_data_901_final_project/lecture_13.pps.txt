Τυχαίοι αριθμοί (random numbers)
Προγραμματισμός II
Τυχαίος αριθμός  δεν καθορίζεται εκ των προτέρων η τιμή που θα λάβει.
Δίνεται από ένα σύνολο ισοπίθανων τιμών.
Οι τυχαίοι αριθμοί που παράγονται στους υπολογιστές δεν είναι μαθηματικά τυχαίοι.
Παράγονται ψευδοτυχαίοι αριθμοί (pseudo-random numbers).
int rand(void); επιστρέφει ένα φυσικό αριθμό (ακέραιο, μη αρνητικό) ανάμεσα στο 0 και τον RAND_MAX.
Ορίζεται στη βιβλιοθήκη stdlib.h
Τυχαίοι αριθμοί
Το παραπάνω πρόγραμμα τυπώνει μία λίστα 10 τυχαίων ακεραίων ανάμεσα στο 0 και το RAND_MAX.
Ακολουθία ψευδοτυχαίων
Το αποτέλεσμα της προηγούμενης rand() είναι η είσοδος της διαδικασίας που παράγει το επόμενο αποτέλεσμα της rand().
Η αρχική τιμή (s) ονομάζεται σπόρος (seed). Εάν ξεκινήσουμε από τον ίδιο σπόρο θα καταλήξουμε στην ίδια ακολουθία τυχαίων αριθμών.
Για να έχουμε διαφορετική ακολουθία τυχαίων αριθμών σε κάθε τρέξιμο του προγράμματος θα πρέπει να αλλάζουμε το seed.
Αυτό μπορεί να επιτευχθεί με χρήση της συνάρτησης:
Για να διασφαλισθεί ότι κάθε φορά θα χρησιμοποιείται διαφορετικός σπόρος χρησιμοποιούμε το εσωτερικό ρολόι: Η συνάρτηση time(NULL) επιστρέφει την τρέχουσα ώρα, και μπορούμε να τη μετατρέψουμε σε ακέραιο για να τη χρησιμοποιήσουμε στη srand():
Πώς θα καθορισθεί ένα συγκεκριμένο πεδίο τιμών;
Παράδειγμα: Προσομοίωση του ριξίματος των ζαριών
Εφόσον Χρειαζόμαστε ένα τυχαίο αριθμό ανάμεσα στο 1 και το 6, θα πρέπει να χρησιμοποιηθεί ο τελεστής υπολοίπου (modulus)
x = rand()%6; Θέτει στο x έναν τυχαίο ακέραιο ανάμεσα στο 0 και το 5 (0, 1, 2, 3, 4, 5)
x = rand()%6 +1; παράγει έναν τυχαίο ακέραιο ανάμεσα στο 1 και το 6.
Πώς μπορούμε να παράξουμε τυχαίους πραγματικούς αριθμούς
με πεδίο τιμών ένα συγκεκριμένο διάστημα [low, high];
Αρχικά απεικονίζουμε τη rand() στο διάστημα [0 1]:
ο d διατηρείται στο [0 1]: (0.0 <= d <= 1.0)
Ή, για να εξαιρέσουμε το 1.0, (0.0 <= d < 1.0):
Στη συνέχεια κάνουμε την αλλαγή κλίμακας του d ως εξής:
(υπενθύμιση) Πρωτότυπα συναρτήσεων
Το πρωτότυπο μίας συνάρτησης ορίζει το όνομα, τους τύπους εισόδου και εξόδου.
Αυτά είναι όλα όσα απαιτούνται για να χρησιμοποιηθεί μία συνάρτηση.
Μερικές συναρτήσεις μοιάζουν να είναι κρυμμένες
Το αρχείο #include<stdio.h> και τα υπόλοιπα αρχεία ‘.h’
Αυτά τα αρχεία κεφαλίδας είναι γεμάτα από πρωτότυπα συναρτήσεων
Το <stdio.h> έχει τα πρωτότυπα (όχι όμως και τα σώματα) των συναρτήσεων printf(), scanf() και πολλών άλλων.
Πού βρίσκονται τα σώματα των συναρτήσεων;
Σε αρχεία βιβλιοθήκης, κρυμμένα κάπου αλλού …
Γιατί;
Ποιο είναι το κίνητρο;
Μετά από ένα διάστημα τα αρχεία .c γεμίζουν με μεγάλη ποσότητα υλικού, γεγονός που έχει ως αποτέλεσμα:
Να υπάρχουν πάρα πολλά σώματα και δηλώσεις συναρτήσεων
Nα μην υπάρχει οργάνωση και ομαδοποίηση των συναρτήσεων
Μπορούμε να τοποθετήσουμε τα πρωτότυπα των συναρτήσεων στο αρχείο myfunc.h και να τα αντικαταστήσουμε με το #include <myfunc.h>
Μπορούμε να τοποθετήσουμε τα σώματα στο αρχείο myfunc.c και να κάνουμε αυτό το αρχείο τμήμα του project.
Η ιδέα; Διεπαφές (Interfaces)
Interface:ένα κοινό σύνορο ανάμεσα σε δύο ξεχωριστές οντότητες:
Η χρήση μίας συνάρτησης (π.χ. printf(), scanf() )
είναι ασυσχέτιστη με τη συγγραφή της, γι’ αυτό μπορούμε να συλλέγουμε σύνολα παρόμοιων συναρτήσεων μέσα σε ‘βιβλιοθήκες’ και να τα χρησιμοποιούμε.
‘Η λογική του μαύρου κουτιού’: να αποκρυφθούν οι εσωτερικές διεργασίες μίας βιβλιοθήκης, όπως ακριβώς συμβαίνει στις συναρτήσεις.
Διεπαφές (Interfaces)
Στη C:
Αρχείο κεφαλίδας == διεπαφή == αρχείο .h
Ένα σταθερό, αξιόπιστο σύνορο ανάμεσα στον κώδικα και τη βιβλιοθήκη των συναρτήσεων.
Το μόνο που απαιτείται να γνωρίζουμε.
Κρατά λίστα με τα πρωτότυπα των συναρτήσεων
Ορίζει για όλες τις συναρτήσεις το όνομα, τις εισόδους, τις εξόδους
Περιέχει πολλά σχόλια με τις ‘οδηγίες χρήσης’).
Βιβλιοθήκες ==εύχρηστες συλλογές συναρτήσεων, που έχουν ήδη γραφεί και αποσφαλματωθεί.
Συγγραφή μίας διεπαφής
Μία καλοσχεδιασμένη διεπαφή:
Έχει ένα συγκεκριμένο θέμα, που αντανακλά στο όνομά της (Παράδειγμα: graphics.h, math.h, windows.h, …)
Είναι απλή (αποκρύπτει τις σύνθετες λεπτομέρειες από το χρήστη)
Είναι πλήρης και επαρκής (επιτελεί όλες τις εργασίες που την αφορούν)
Είναι γενική
Είναι σταθερή (η διεπαφή παραμένει η ίδια ακόμη κι αν βελτιωθεί/ αλλαχθεί η υλοποίηση)
Βήμα 1: Δημιούργησε ένα αρχείο διεπαφής myfuncs.h, αποτελούμενο από πρωτότυπα συναρτήσεων και σχόλια.
Βήμα 2: Γράψε όλες τις υλοποιήσεις των συναρτήσεων σε χωριστό αρχείο myfuncs.c .
Βήμα 3: Για να χρησιμοποιήσεις οποιαδήποτε από αυτές τις συναρτήσεις στη main(), το μόνο που απαιτείται είναι η εντολή:
Σύνταξη του αρχείου διεπαφής
Περιεχόμενα του αρχείου κεφαλίδας:
γραμμές #include
ορισμοί σταθερών
ορισμοί τύπων
πρωτότυπα συναρτήσεων
Τα καλά σχόλια είναι ΑΚΡΩΣ ΣΗΜΑΝΤΙΚΑ
ΑΝΟΙΞΤΕ ΕΝΑ ΑΡΧΕΙΟ .h ΚΑΙ ΜΕΛΕΤΗΣΤΕ ΤΟ
‘Wrapper’: περισσότερες εντολές του compiler,
“περιέλαβε μόνο μία φορά”
Επιτρέπονται οι ΕΝΘΕΤΕΣ ΒΙΒΛΙΟΘΗΚΕΣ
Το αρχείο βιβλιοθήκης (myfuncs.c) μπορεί να απαιτεί άλλες συναρτήσεις όπως η printf().
Θέσε τις προτάσεις include του #include <stdio.h>
μέσα στη διεπαφή (myfuncs.h), (όχι στο myfuncs.c).
ΠΡΟΣΟΧΗ! Τα ‘κυκλικά’ include δε λειτουργούν!
