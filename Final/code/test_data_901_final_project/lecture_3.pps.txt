Προγραμματισμός II
Αρθρωτός Σχεδιασμός – Συναρτήσεις
Βασική ιδέα της επιστήμης των υπολογιστών:
Τμηματοποίηση
Τεμαχισμός μεγάλων και σύνθετων προβλημάτων σε μικρά, απλά τμήματα.
Στη C αυτά τα τμήματα ονομάζονται συναρτήσεις (functions):
Αποτελούν αυτόνομες, επώνυμες μονάδες κώδικα, σχεδιασμένες να επιτελούν συγκεκριμένο έργο.
Μπορούν να κληθούν επανειλημμένα σε ένα πρόγραμμα, δεχόμενες κάθε φορά διαφορετικές τιμές στις εισόδους τους.
Μία συνάρτηση…
εκτελεί ένα σαφώς καθορισμένο έργο (π.χ. printf)
μπορεί να χρησιμοποιηθεί από άλλα προγράμματα
είναι ένα “μαύρο κουτί”, το οποίο:
έχει ένα απλό σύνολο εισόδων (μεταβλητές)
μία απλή έξοδο
ένα κρυμμένο σώμα, αποτελούμενο από προτάσεις
Ήδη γνωστές συναρτήσεις
main() : Η πρώτη (και τελευταία) συνάρτηση που εκτελείται όταν εκτελείται ένα πρόγραμμα.
Επιτρέπεται (μάλιστα ενθαρρύνεται!) η ένθεση συναρτήσεων:
Μέσα από τη main() μπορεί να κληθεί οποιαδήποτε συνάρτηση.
Οι δικές μας συναρτήσεις μπορούν να καλέσουν άλλες, κ.ο.κ.
Βασικά στοιχεία των συναρτήσεων
Μία συνάρτηση έχει:
ένα όνομα, για να λειτουργήσει μία συνάρτηση πρέπει να κληθεί κατ’ όνομα
ένα σώμα, ένα σύνολο προτάσεων και μεταβλητών
(προαιρετικά) εισόδους, μία λίστα ορισμάτων
μία (προαιρετικά) έξοδο, τερματίζοντας επιστρέφει μία τιμή
Όπως οι μεταβλητές, έτσι και οι συναρτήσεις πρέπει να “δηλώνονται” προτού χρησιμοποιηθούν.
Επίσης πρέπει να “ορίζονται” — να έχει γραφεί το σώμα τους.
Το όνομα της συνάρτησης συναντάται σε ένα πρόγραμμα σε προτάσεις τριών διαφορετικών μορφών:
1) Πρόταση δήλωσης της συνάρτησης
2) Πρόταση ορισμού της συνάρτησης
3) Πρόταση κλήσης της συνάρτησης
Παράδειγμα: Χωρίς συναρτήσεις
/* Mετατροπή βαθμών Φαρενάιτ σε βαθμούς Κελσίου */
Πώς θα γράφαμε τον κώδικα εάν αυτή η μετατροπή χρειαζόταν σε πολλά διαφορετικά σημεία του προγράμματος;
θα ενταχθούν σε συνάρτηση
Παράδειγμα: Με συναρτήσεις
Όνομα συνάρτησης
Σώμα συνάρτησης
Κλήση συνάρτησης
Δήλωση συνάρτησης
Δήλωση συναρτήσεων
Πρότυπο συνάρτησης, αποτελούμενο από τρία τμήματα, όπου ορίζονται:
Το όνομα: να είναι ενδεικτικό της λειτουργίας της
Είσοδοι (εφόσον υπάρχουν): μία λίστα ορισμάτων, αποτελούμενη από ονόματα μεταβλητών εισόδου και τύπων δεδομένων
Τύπος της εξόδου: τύπος δεδομένου της επιστρεφόμενης τιμής, εφόσον επιστρέφεται τιμή (προκαθορισμένος τύπος, default: int)
Παράδειγμα:
Πού γίνεται η δήλωση; Τοποθετείστε τη μετά από τις προτάσεις #include, πριν όμως τη main().
Σύνταξη συναρτήσεων
Σύνταξη της δήλωσης της συνάρτησης:
Σύνταξη της συνάρτησης:
προτάσεις;
Εάν η συνάρτηση δεν επιστρέφει τιμή, σημειώστε ως return_type τη λέξη void.
Οι συναρτήσεις μπορούν να έχουν τις δικές τους εσωτερικές μεταβλητές, όπως ακριβώς έχει η main().
return(): θέτει την έξοδο της συνάρτησης.
( μην ξεχνάτε το ; )
(Σχεδόν τα ίδια)
Δήλωση και Ορισμός
Επιστρεφόμενη τιμή
όνομα συνάρτησης
λίστα ορισμάτων (ένα όρισμα)
ορισμός συνάρτησης
Γενική μορφή ενός C προγράμματος
εντολές προεπεξεργαστή (#include, #define,…)
δηλώσεις συναρτήσεων
δηλώσεις μεταβλητών (εφόσον απαιτούνται)
δηλώσεις μεταβλητών
προτάσεις
Θα πρέπει να σημειωθεί ότι μπορεί να παραληφθεί η δήλωση της συνάρτησης εάν η συνάρτηση παρουσιάζεται μέσα στο πρόγραμμα πριν από την πρώτη κλήση της.
Ωστόσο αυτή είναι μία ριψοκίνδυνη τακτική και θα πρέπει να αποφεύγεται!!!
Παραλήφθηκε η δήλωση της square γιατί αυτή ορίζεται πριν κληθεί.
Εάν όμως γράφαμε τη square κάτω από τη main έπρεπε να τη δηλώσουμε.
Παράδειγμα: Να γραφεί πρόγραμμα, στο οποίο να καλούνται οι συναρτήσεις, τα πρωτότυπα των οποίων δίνονται ως ακολούθως:
Λύση: Πριν από κάθε κλήση συνάρτησης πρέπει να υπάρχει στον πηγαίο κώδικα το πρωτότυπό της, έτσι ώστε ο μεταγλωττιστής να ελέγξει αν κάθε πρόταση κλήσης είναι σύμφωνη ως προς τον αριθμό και τον τύπο των ορισμάτων, καθώς και τον τύπο της επιστρεφόμενης τιμής.
include και define
Στο παράδειγμα αυτό δε γράψαμε τις συναρτήσεις παρά μόνο τον τρόπο δήλωσης και κλήσης
Τοπικές μεταβλητές (local variables)
Έχουν νόημα μόνο μέσα στη συνάρτηση που δηλώνονται.
Δύο διαφορετικές συναρτήσεις μπορούν να έχουν τοπική μεταβλητή με το ίδιο όνομα χωρίς να παρουσιάζεται πρόβλημα.
Παράδειγμα με τοπικές μεταβλητές
Καθολικές μεταβλητές (global variables)
Δηλώνονται πριν τη main().
Εφαρμόζονται σε ΟΛΑ τα τμήματα ενός προγράμματος.
Όταν μεταβάλλεται η τιμή μίας καθολικής μεταβλητής σε οποιοδήποτε σημείο του προγράμματος, η νέα τιμή μεταφέρεται σε όλο το υπόλοιπο πρόγραμμα.
Οι καθολικές μεταβλητές είναι μία κακή ιδέα, καθώς αποτρέπουν τον ξεκάθαρο μερισμό του προβλήματος σε ανεξάρτητα τμήματα.
Για μία τοπική μεταβλητή ο χώρος στη μνήμη δεσμεύεται μόλις ο έλεγχος περάσει στη συνάρτηση, αποδεσμεύεται δε με το τέλος αυτής, οπότε και η μεταβλητή δεν έχει πλέον νόημα.
Παράδειγμα με καθολικές μεταβλητές
float glob; // καθολική μεταβλητή
Εμβέλεια μεταβλητών (scope)
Εμβέλεια προγράμματος: μεταβλητές αυτής της εμβέλειας είναι οι καθολικές.
Είναι ορατές από όλες τις συναρτήσεις του πρόγραμματος, έστω κι αν βρίσκονται σε διαφορετικά αρχεία πηγαίου κώδικα.
Εμβέλεια αρχείου: μεταβλητές αυτής της εμβέλειας είναι ορατές μόνο στο αρχείο που δηλώνονται και μάλιστα από το σημείο της δήλωσής τους και κάτω.
Μεταβλητή που δηλώνεται με τη λέξη κλειδί static πριν από τον τύπο, έχει εμβέλεια αρχείου, π.χ. static int velocity.
Εμβέλεια συνάρτησης: Προσδιορίζει την ορατότητα του ονόματος από την αρχή της συνάρτησης έως το τέλος της.
Εμβέλεια συνάρτησης έχουν μόνο οι goto ετικέτες.
Εμβέλεια μπλοκ: Προσδιορίζει την ορατότητα από το σημείο δήλωσης έως το τέλος του μπλοκ στο οποίο δηλώνεται.
Μπλοκ είναι ένα σύνολο από προτάσεις, οι οποίες περικλείονται σε άγκιστρα.
Μπλοκ είναι η σύνθετη πρόταση αλλά και το σώμα συνάρτησης.
Εμβέλεια μπλοκ έχουν και τα τυπικά ορίσματα των συναρτήσεων.
Εμβέλεια μεταβλητών (συνέχεια)
Η C επιτρέπει τη χρήση ενός ονόματος για την αναφορά σε διαφορετικά αντικείμενα, με την προϋπόθεση ότι αυτά έχουν διαφορετική εμβέλεια ώστε να αποφεύγεται η σύγκρουση ονομάτων (name conflict). Εάν οι περιοχές εμβέλειας έχουν επικάλυψη, τότε το όνομα με τη μικρότερη εμβέλεια αποκρύπτει (hides) το όνομα με τη μεγαλύτερη.
Παράδειγμα: Να προσδιορισθεί η εμβέλεια του ακόλουθου πηγαίου κώδικα:
Επεξηγήσεις στην επόμενη διαφάνεια
Επεξηγήσεις:
4 int a; static int b; Η a είναι καθολική μεταβλητή με εμβέλεια προγράμματος.
Η b έχει εμβέλεια αρχείου, όπως προσδιορίζει η λέξη static.
10 int c=13; Έχει εμβέλεια προγράμματος αλλά είναι ενεργή από το σημείο δήλωσής της και κάτω (γραμμή 10).
11 int max(int a, int b){ Οι a και b έχουν εμβέλεια μπλοκ και αποκρύπτουν για το σώμα της max() τις καθολικές μεταβλητές a και b.
6 a=12; b=a--; Αποδίδονται οι τιμές 11 και 12 στις a και b, αντίστοιχα.
7 printf( “a:%d\tb:%d\tmax(b+5,a):%d\n”,a,b,max(b+5,a) ); Καλείται η συνάρτηση max() και αυτή δίνει στα τυπικά ορίσματα a και b τις τιμές 17 και 11, αντίστοιχα.
Η max() επιστρέφει στην printf το 17.
8 func(a+b); Καλείται η συνάρτηση func() και αυτή δίνει στο τυπικό όρισμα x την τιμή 11+12=23. Το όρισμα x έχει εμβέλεια μπλοκ.
Η τοπική μεταβλητή b=20, που δηλώνεται στη γραμμή 15, αποκρύπτει από το σώμα της func() την καθολική μεταβλητή b.
Αντίθετα η καθολική μεταβλητή a είναι ορατή από το σώμα της func().
